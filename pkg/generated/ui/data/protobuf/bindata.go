// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6f\xdb\x46\x12\x7f\xd7\x5f\x31\xd0\xcb\x39\x07\x5b\x8c\x9d\xe6\xae\xb0\xea\xc3\xa9\x72\x9a\x08\x89\x3f\x10\xb9\x31\xf2\x24\x8c\x96\x23\x6a\xcf\xcb\x5d\x66\x77\x29\x59\x09\xfc\xbf\x1f\xf6\x83\x12\x49\x51\x69\xd2\xf4\xa1\x06\xda\x90\x3b\x1f\x9c\xf9\xcd\xe7\x2a\x49\x60\xac\x8a\x8d\xe6\xd9\xd2\xc2\xd9\xf3\xd3\x9f\x61\x8a\xb9\x29\x65\x06\xd3\xcb\x29\x8c\x85\x2a\x53\xb8\x46\xcb\x57\x04\x63\x95\x17\xa5\xe5\x32\x83\x3b\xc2\x1c\xb0\xb4\x4b\xa5\xcd\xa0\x97\x24\xbd\x24\x81\x77\x9c\x91\x34\x94\x42\x29\x53\xd2\x60\x97\x04\xa3\x02\xd9\x92\x2a\xca\x31\x7c\x20\x6d\xb8\x92\x70\x36\x78\x0e\x47\x8e\xa1\x1f\x49\xfd\x67\x43\xa7\x62\xa3\x4a\xc8\x71\x03\x52\x59\x28\x0d\x81\x5d\x72\x03\x0b\x2e\x08\xe8\x91\x51\x61\x81\x4b\x60\x2a\x2f\x04\x47\xc9\x08\xd6\xdc\x2e\xfd\x77\xa2\x16\x67\x09\x7c\x8c\x3a\xd4\xdc\x22\x97\x80\xc0\x54\xb1\x01\xb5\xa8\x33\x02\xda\x68\xb4\xfb\x5b\x5a\x5b\x9c\x27\xc9\x7a\xbd\x1e\xa0\x37\x78\xa0\x74\x96\x88\xc0\x6a\x92\x77\x93\xf1\xab\xeb\xe9\xab\x93\xb3\xc1\xf3\x28\xf4\xbb\x14\x64\x0c\x68\xfa\x54\x72\x4d\x29\xcc\x37\x80\x45\x21\x38\xc3\xb9\x20\x10\xb8\x06\xa5\x01\x33\x4d\x94\x82\x55\xce\xe8\xb5\xe6\x0e\xb7\x63\x30\x6a\x61\xd7\xa8\xc9\xa9\x49\xb9\xb1\x9a\xcf\x4b\xdb\xc0\xac\x32\x91\x9b\x06\x83\x92\x80\x12\xfa\xa3\x29\x4c\xa6\x7d\xf8\x75\x34\x9d\x4c\x8f\x9d\x92\xfb\xc9\xdd\x9b\x9b\xdf\xef\xe0\x7e\xf4\xfe\xfd\xe8\xfa\x6e\xf2\x6a\x0a\x37\xef\x61\x7c\x73\x7d\x39\xb9\x9b\xdc\x5c\x4f\xe1\xe6\x37\x18\x5d\x7f\x84\xb7\x93\xeb\xcb\x63\x20\x6e\x97\xa4\x81\x1e\x0b\xed\x3c\x50\x1a\xb8\x43\x93\x52\x0f\xdd\x94\xa8\x61\xc2\x42\x05\x93\x4c\x41\x8c\x2f\x38\x03\x81\x32\x2b\x31\x23\xc8\xd4\x8a\xb4\x74\x99\x50\x90\xce\xb9\x71\x51\x35\x80\x32\x75\x6a\x04\xcf\xb9\x45\xeb\x8f\xf6\xfc\x1a\xf4\x1c\xcb\x15\x67\x4b\x24\x01\x1f\x48\xd2\x67\x8e\xf0\x4b\xbe\x0a\x4f\xff\xcd\x72\xe4\x62\xc0\x54\xfe\x1f\xc7\x37\x12\xfc\x01\xe1\x1d\x6a\x43\x12\x7e\x41\xf7\x36\x10\xfe\xad\xce\xd8\x33\x1b\x69\xf1\x11\x2e\xa0\x5f\x68\x65\xd5\x8b\xfe\xb0\xd7\x2b\x90\x3d\x38\x53\x59\x8e\xb8\x36\xc3\x5e\x8f\xe7\x85\xd2\x16\xfa\x99\x52\x99\xa0\x04\x0b\x9e\xa0\x94\x2a\x5a\x3a\xf0\x92\xfd\xe1\x96\xcd\xbf\xb3\x93\x8c\xe4\x89\x59\x63\x96\x91\x4e\x54\xe1\x59\x3b\xc5\x7a\xbd\x40\x85\xa3\x4c\x17\x6c\x90\xa1\xa5\x35\x6e\x02\x99\xcd\x32\x92\xb3\xa8\x65\x10\xb5\x0c\x54\x41\x12\x0b\xbe\x3a\xab\x28\xcf\xe0\x02\xbe\xf4\x00\xb8\x5c\xa8\x73\xff\x04\x60\xb9\x15\x74\x0e\xfd\xb1\x28\x8d\x25\x0d\x57\x28\x31\x23\x0d\xa3\xfb\x29\xbc\x21\x51\xb8\xc7\xdb\x49\x7f\xe8\x99\x57\xa1\xbc\xce\xa1\xbf\x7a\x3e\x38\x1d\x3c\x8f\xc7\x4c\x49\x8b\xcc\x56\x2a\xdd\x9f\xc4\xdc\x69\x6d\x85\x21\xf2\xbb\xbf\x52\x8b\x73\xe8\xbb\xca\x30\xe7\x49\x92\x71\x2b\x70\xee\xc0\x4e\xaa\x40\x25\x2c\xc7\x13\x5c\x9b\x9a\x0c\xb9\x88\x9c\x43\x7f\x3f\x96\x91\xe9\xc9\xfd\xe3\xff\x47\x8f\x96\xb4\x44\x31\x4b\x15\x33\x95\x61\xdf\xfb\xcd\x94\x0c\xd3\xdc\xa3\xe9\x7c\x51\x9a\x00\xe7\xaa\xb4\xf0\x0d\x60\x3d\xf5\x00\x0c\x5b\x52\x4e\xe6\x1c\xde\xdc\xdd\xdd\x4e\x87\xed\x13\x77\xc0\x94\x34\xa5\x3f\xe9\xc7\x0a\x77\x5f\x4b\xfe\x67\x94\xf4\x6a\x0a\xad\xd2\x92\x1d\xa2\x3f\x0d\x7b\x3d\x43\x7a\xc5\x19\x6d\x6d\x0a\xae\xba\xc2\xe5\x42\x38\xf9\x15\xf7\x2d\x11\x81\x05\x0e\x4f\xd7\x05\x83\xb1\x26\xb4\x54\xc9\x1d\x35\x5e\xaf\x4c\xf6\x0c\x34\xd9\x52\x4b\xd3\x22\xbd\xa7\x42\x6c\x9e\xd5\x62\xbd\xcd\x4b\x9f\xf7\x03\x2c\xf8\xc0\x61\x5c\x65\xdb\xee\xaf\x28\x2d\x9c\x43\xdf\x57\xc6\xea\x34\x89\xf6\xf4\x1b\x3c\x73\x95\x6e\x1c\xd3\x3f\x77\xc7\x4f\x31\xb8\x0d\xc7\x34\x59\xcd\x69\x15\xfa\x89\xb1\x68\x4b\xe3\x7a\xf0\xd6\x4b\xd7\x2b\x80\x5b\x03\x0f\xe5\x9c\x98\x92\x0b\x9e\xf9\x76\xc3\x94\x94\xc4\x2c\x5f\x71\xbb\xd9\x22\xf1\x9a\xec\x16\x86\xdd\x73\x13\x83\xdd\xf9\x9f\x07\x20\xa3\xaf\x03\xd0\xe9\x69\x4a\x82\x2c\x75\xc4\xef\xd2\x13\xb6\x86\x37\x5e\x9b\xb6\x37\x48\x7f\xde\xfc\x68\xc9\x77\x7b\xb0\x8d\x15\x82\xe0\xc6\xba\x38\x45\x41\xd3\x11\x82\x77\x8e\xe5\xa8\xf9\x7e\x28\x14\x8e\xf6\x57\x87\x23\x71\x36\xfe\xb1\x47\xa5\x96\x55\x3f\xf4\x0d\x55\xe7\xbe\x34\x63\x87\xc0\x82\x83\xab\xcc\x5a\xb8\x5e\x93\x8d\xeb\xc9\xa4\xc6\x7e\xb4\x3b\xde\x73\x32\x9e\xff\x65\x0e\x46\x73\x3b\x7c\x7b\xea\xf5\x72\x32\xc6\x8d\xb3\x76\x1b\xd8\x35\x94\x6b\xcc\xa9\xda\x73\xaa\x2a\xb3\x0a\xe6\xb4\xeb\x32\x94\x7a\x66\xb7\x55\xc8\xcc\x0f\x01\xb8\x80\xd3\x61\xa5\xe1\x6e\x19\x79\xdd\xcc\xae\x86\xbe\xc7\xc1\x73\x34\x3e\x7d\x1b\xf9\xa6\x05\xb1\x9d\xd0\x05\x9c\x0d\x0f\x5a\xeb\x81\xaa\x35\xc0\x25\xf9\x65\x44\x69\xbf\xef\xd5\xcd\x5e\xa3\xa9\x1b\xed\x16\x2c\xbf\x0a\xba\x8d\x8b\x8c\xed\x85\x4e\xa4\x04\xa8\x87\x3d\x07\x52\xb2\xc8\x85\x69\x23\x11\x45\x41\x93\x29\x94\x34\x14\x3c\x0a\xc4\x89\xa5\x7c\xcb\xd8\x76\xa1\xd1\x70\xbe\x05\x6d\xa1\xd4\x83\xdb\xe8\x8a\xaf\x62\x3d\xd6\x94\x92\xb4\x1c\x85\x71\x72\x9f\x4a\xd2\x9b\xed\xc2\x55\x6f\x25\xa3\xfb\x69\x9d\x97\xd5\x9e\x0f\x9b\xda\x82\x7a\x62\x1a\x76\x72\x19\xda\xf2\xc6\x58\xca\xf7\xc1\xac\x43\x73\xe9\xd1\xfc\x2a\x40\xed\xc6\x56\x8f\x30\x5a\xb7\xc7\xd6\xbe\xfd\x0f\x13\xa0\xb0\xca\x8d\x6f\xab\xd5\xe6\x7b\x50\x8a\x1d\xee\x07\x20\xda\x6f\xb5\x3b\x73\xc7\xaa\x14\x69\x03\xa8\x39\x55\x56\xc6\xca\xe9\x4a\xba\xe9\x76\xba\x39\xd1\x7a\x8a\x46\xaf\xe2\xf8\x3b\x1c\xad\xd8\x42\xe1\xcb\x61\xf2\x0f\x05\x34\x0a\xbd\xeb\x6c\xee\x54\xb8\x12\x4d\xbb\x6a\x61\xdf\xe6\x3a\xd3\xce\x98\xcb\x56\x21\xd4\x9d\xe7\x69\xc3\x86\x8e\xb2\xe9\x48\x80\xb3\x61\x57\x0a\x99\x06\xd0\x1d\xd2\x5b\xa0\x5f\x74\x19\x5d\x4b\xe5\xbf\xb7\xe9\x1d\xf2\xb5\x2d\xc9\xaa\x6a\x49\x72\x8f\x07\xd4\xd5\xf8\x2f\xe0\xa7\xc3\x2d\xb9\xd1\xc5\x3b\xeb\x76\xdb\xda\x4f\x80\x95\x5a\x93\xb4\x22\x36\x63\x6e\x00\xd7\xfe\x0e\x99\x23\x9a\x3f\x1c\x2c\xd5\x30\x56\x0b\x78\x5b\xce\x49\x4b\xb2\xd4\x90\x7a\xf8\xd9\xcc\x2a\x26\x8f\xa3\x27\x2a\x49\x6a\xb1\xb5\x62\x56\x1f\xe5\xbb\x61\x1a\x3f\xe1\xf6\xfc\xfd\xb1\xb5\x37\xba\x46\xf7\x53\xef\xaf\xb3\x7e\x0b\xf8\x53\xef\x1b\xe6\x12\x37\xf0\x66\xb4\xab\xaf\x25\xcf\x96\x33\x5c\x21\x17\x38\xe7\x82\xdb\x4d\x00\xbb\x66\xd1\x02\xe7\x9a\xb3\x38\x18\x4a\xd3\x9a\xbf\x64\xd7\x4a\x3f\xcc\x22\xd3\x05\xbc\x1c\xf6\x5c\xa4\xa2\x2c\x6b\xf6\xbe\x32\x5e\xc8\x99\x73\xc5\x89\xd7\x43\x5f\x05\xb7\xd5\x09\xbf\xd4\x6d\x99\x12\xd3\x64\xdf\xd2\x66\x92\x7a\x45\xa3\xdb\x09\x8c\x18\x23\xd3\x88\x82\xf1\x5c\xb3\x07\xda\xcc\x5a\xf9\xbf\xd3\x11\xa4\xde\xd2\x66\xab\x07\x0f\xe9\x09\x04\xa7\xae\x51\x1b\x4e\xd7\x7b\xca\x5c\x14\x0f\xab\xd0\x81\x61\xaf\x9c\xbb\x62\xd9\xf0\xd4\xe5\xc1\x25\x5a\x84\x31\xc9\xda\x8c\x70\x47\xe1\x04\x52\xb4\x38\x63\xe1\xf9\x2b\xf3\x66\x5e\xf2\xe6\x44\xf8\xa6\x71\x13\x75\xfd\xfa\xf1\x06\xb8\xa5\xdc\x54\x42\xb7\x3a\xd6\x64\xa9\x29\x75\x7d\xc8\x2d\x34\x46\x95\x9a\x51\xb3\xf2\x27\xd2\x58\xff\x03\x57\xa6\x55\x59\xb4\xfa\xf4\xe8\x7e\x5a\xd1\x5f\x3b\x32\xf0\xf8\x36\x0b\xdc\x21\x07\x77\xc9\xcc\xd9\x72\x0f\x8c\x5a\xba\xd4\x40\x69\xd4\x53\x10\x8c\x21\x38\x2a\xcd\x09\xa1\xb1\x27\xa7\xc7\x40\x96\x0d\x9e\x6d\x39\xdb\xa1\x3a\x1d\xee\x2b\x69\x54\xc8\x67\x25\xc9\xd4\x14\xce\x8f\xa1\x7a\x3e\x63\xfe\x79\x4d\xee\x39\x6d\x7f\x69\x0b\x40\xfc\x64\x5d\xeb\x2c\x68\xdd\xa2\xbf\x2b\xe6\xdf\x94\x86\xf5\x92\x24\x18\x95\xfb\xdf\x13\x65\x66\x00\x35\x01\x0a\x4d\x98\x6e\x42\x39\xc5\xba\xac\xc1\xd2\x11\xab\xbd\x76\xf3\xe1\x76\x0c\x3c\x3d\x86\xb9\x40\xf9\xe0\xf3\xd8\xfd\xd7\x0f\x1a\x5d\xe3\xf2\xef\x1b\x55\xf6\x8f\x61\xc1\x85\xa0\x14\xf8\xc2\xff\xc6\xe9\x0c\x70\xe9\xf1\xe1\x76\xdc\x46\x72\x55\xb0\x46\xe1\x55\x4b\x06\xb1\x52\x3b\xfc\x7c\x90\xdb\x42\x26\x52\x43\x0a\x04\xf9\xb3\x61\xdb\xde\xc9\xe8\x0a\xb4\x12\xd4\x5e\x33\xe1\x08\xb5\xdc\x0b\x29\xc7\x7c\xe6\xb8\x67\xa8\x65\x57\x9b\x6c\x25\x29\xa4\xb4\xe0\xd2\xdd\x21\xed\xa6\x20\x7f\xbd\x97\x65\x3e\x77\x7d\x74\xb1\x4d\x51\xd3\x86\xb9\x99\xc9\x0d\x84\xb7\xfa\xbd\xbe\xa3\xfc\xe5\x40\xa0\xce\xe8\x40\x02\x7a\xa6\x36\x68\x57\x5c\xf2\xbc\xcc\xbb\x0c\x81\xa3\x94\x16\x58\x0a\xeb\xeb\xfc\x33\x69\xb5\x53\xc9\xa5\x7d\x71\x06\x39\x97\xb3\x4f\x25\x4a\x1b\xfa\x7a\x13\xce\x2b\x7c\xfc\x01\xcd\xf8\x58\xd7\xfc\xa2\x76\xcb\x4b\x12\xb7\xf7\xd5\x67\xa5\x6b\x8d\xd3\x70\x53\xad\x6d\x86\xbb\x2b\x69\x58\x1a\x93\x04\xc2\x86\xe8\x42\x5b\x49\x57\xab\xe8\xbe\x5c\x7b\x9b\x5c\x80\x2a\x48\x87\xa9\xea\xee\x5e\x37\x6f\x0f\xdc\x0a\x2a\x55\x1d\x37\xe5\xbd\xf2\xb0\x98\x81\x0a\x8b\x69\xc6\xdd\xc5\xab\x50\x86\x5b\xa5\x37\xed\xd8\x65\xdc\xd6\x06\xff\xe9\x5e\xde\x2e\xd1\x2c\xab\xd5\xc9\x69\x62\x2a\xcf\xb9\xed\xd2\x12\x28\x7b\xd1\xea\x98\xe8\x56\x13\x79\x57\x99\x20\x94\xa1\x45\xb8\x6e\xdf\xa9\xd6\x31\xcf\xdc\x86\x46\xbb\x70\x45\xd5\x97\xbe\xd4\x17\x61\x52\xb4\x65\xfd\xe1\x2c\x0d\x72\x3f\x35\xe4\x3e\xec\x22\x9c\xf9\xd9\x9e\x86\xc5\x2e\x2f\xb8\xa0\x3d\x1b\x54\x0d\x9f\x97\x0d\x3d\xe3\x20\xa1\x77\xcb\x45\x4d\x8e\x55\xc4\x0b\xf8\x57\x43\xea\x56\xa0\x75\x91\x03\x6e\x03\x08\x81\x31\xec\x05\x09\xe8\x52\xfa\xdf\xf6\x6b\x0b\x54\xd4\x58\x54\x82\x17\xf0\xef\x76\x43\xa8\x5c\xaa\x25\x85\x27\x75\xe4\x4a\xf4\xa6\xb1\xcd\x55\x57\x8d\xde\xff\x03\x00\x00\xff\xff\x9c\x43\x37\x92\x91\x1a\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6801, mode: os.FileMode(420), modTime: time.Unix(1536014709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
