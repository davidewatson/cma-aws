// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdf\x73\xdb\x36\xf2\x7f\xd7\x5f\xb1\xa3\x97\xaf\xf3\x1d\x5b\x8a\x9d\xe6\xae\x63\xd7\x37\xa7\x4a\x6e\xa2\x49\x22\x69\x4c\xc7\x9e\x3e\x69\x20\x70\x45\xe1\x4c\x02\x2c\x00\x4a\x56\x33\xfe\xdf\x6f\x16\x00\x29\x92\x92\x9c\xa4\xcd\xcb\x69\xa6\x0d\x49\xec\x7e\xb8\xf8\xec\x4f\xd0\xfd\x3e\x0c\x55\xbe\xd5\x22\x59\x59\xb8\x78\x7d\xfe\x33\x44\x2c\x33\x85\x4c\x20\x1a\x45\x30\x4c\x55\x11\xc3\x84\x59\xb1\x46\x18\xaa\x2c\x2f\xac\x90\x09\xdc\x21\xcb\x80\x15\x76\xa5\xb4\xe9\x75\xfa\xfd\x4e\xbf\x0f\x1f\x05\x47\x69\x30\x86\x42\xc6\xa8\xc1\xae\x10\x06\x39\xe3\x2b\x2c\x57\x4e\xe1\x1e\xb5\x11\x4a\xc2\x45\xef\x35\x9c\x90\x40\x37\x2c\x75\x5f\x5d\x11\xc4\x56\x15\x90\xb1\x2d\x48\x65\xa1\x30\x08\x76\x25\x0c\x2c\x45\x8a\x80\x4f\x1c\x73\x0b\x42\x02\x57\x59\x9e\x0a\x26\x39\xc2\x46\xd8\x95\x7b\x4f\x40\x21\x4b\xe0\xf7\x80\xa1\x16\x96\x09\x09\x0c\xb8\xca\xb7\xa0\x96\x75\x41\x60\x36\x18\x4d\xbf\x95\xb5\xf9\x65\xbf\xbf\xd9\x6c\x7a\xcc\x19\xdc\x53\x3a\xe9\xa7\x5e\xd4\xf4\x3f\x8e\x87\x37\x93\xe8\xe6\xec\xa2\xf7\x3a\x28\x7d\x96\x29\x1a\x03\x1a\xff\x28\x84\xc6\x18\x16\x5b\x60\x79\x9e\x0a\xce\x16\x29\x42\xca\x36\xa0\x34\xb0\x44\x23\xc6\x60\x15\x19\xbd\xd1\x82\x78\x3b\x05\xa3\x96\x76\xc3\x34\x12\x4c\x2c\x8c\xd5\x62\x51\xd8\x06\x67\xa5\x89\xc2\x34\x04\x94\x04\x26\xa1\x3b\x88\x60\x1c\x75\xe1\xd7\x41\x34\x8e\x4e\x09\xe4\x61\x7c\xf7\x7e\xfa\xf9\x0e\x1e\x06\xb7\xb7\x83\xc9\xdd\xf8\x26\x82\xe9\x2d\x0c\xa7\x93\xd1\xf8\x6e\x3c\x9d\x44\x30\xfd\x0d\x06\x93\xdf\xe1\xc3\x78\x32\x3a\x05\x14\x76\x85\x1a\xf0\x29\xd7\xb4\x03\xa5\x41\x10\x9b\x18\x3b\xea\x22\xc4\x86\x09\x4b\xe5\x4d\x32\x39\x72\xb1\x14\x1c\x52\x26\x93\x82\x25\x08\x89\x5a\xa3\x96\x14\x09\x39\xea\x4c\x18\xf2\xaa\x01\x26\x63\x82\x49\x45\x26\x2c\xb3\xee\xd1\xde\xbe\x7a\x1d\x12\xf9\x24\xf8\x8a\x61\x0a\xf7\x28\xf1\x4f\xc1\xe0\x97\x6c\xed\xaf\xfe\x9d\x64\x4c\xa4\x3d\xae\xb2\x7f\x91\xdc\x20\x15\x8f\x0c\x3e\x32\x6d\x50\xc2\x2f\x8c\xee\x7a\xa9\xbb\xab\x0b\x76\xcc\x56\x5a\xf6\x04\xd7\xd0\xcd\xb5\xb2\xea\x4d\xf7\xaa\xd3\xc9\x19\x7f\x24\x53\x79\xc6\xd8\xc6\x5c\x75\x3a\x22\xcb\x95\xb6\xd0\x4d\x94\x4a\x52\xec\xb3\x5c\xf4\x99\x94\x2a\x58\xda\x73\x9a\xdd\xab\x4a\xcc\xdd\xf3\xb3\x04\xe5\x99\xd9\xb0\x24\x41\xdd\x57\xb9\x13\x3d\xa8\xd6\xe9\xf8\x55\x38\x49\x74\xce\x7b\x09\xb3\xb8\x61\x5b\xbf\xcc\xe7\x09\xca\x79\x40\xe9\x05\x94\x9e\xca\x51\xb2\x5c\xac\x2f\xca\x95\x57\x70\x0d\x5f\x3a\x00\x42\x2e\xd5\xa5\xbb\x02\xb0\xc2\xa6\x78\x09\xdd\x61\x5a\x18\x8b\x1a\x3e\x31\xc9\x12\xd4\x30\x78\x88\xe0\x3d\xa6\x39\x5d\xce\xc6\xdd\x2b\x27\xbc\xf6\xe9\x75\x09\xdd\xf5\xeb\xde\x79\xef\x75\x78\xcc\x95\xb4\x8c\xdb\x12\x92\x7e\x92\x65\x84\xda\x72\x43\x90\xa7\x5f\xa1\xd3\x4b\xe8\x52\x66\x98\xcb\x7e\x3f\x11\x36\x65\x0b\x22\xbb\x5f\x3a\xaa\xcf\x33\x76\xc6\x36\xa6\xa6\x83\xe4\x91\x4b\xe8\xee\xfb\x32\x08\x3d\xd3\x3f\xee\x7f\xf8\x64\x51\x4b\x96\xce\x63\xc5\x4d\x69\xd8\xf7\xbe\x33\x46\xc3\xb5\x70\x6c\xd2\x5e\x94\x46\x60\x0b\x55\x58\xf8\x06\xb2\x9e\x3b\x00\x86\xaf\x30\x43\x73\x09\xef\xef\xee\x66\xd1\x55\xfb\x09\x3d\xe0\x4a\x9a\xc2\x3d\xe9\x86\x0c\xa7\xb7\xf5\xff\x63\x94\x74\x30\xb9\x56\x71\xc1\x8f\xad\x3f\x5f\x75\x3a\x06\xf5\x5a\x70\xac\x6c\xf2\x5b\xa5\xc4\x15\x69\x4a\xfa\x6b\xe1\x4a\x22\x03\xee\x25\xdc\xba\xce\x39\x0c\x35\x32\x8b\xa5\xde\x49\xe3\xf6\x93\x49\x5e\x81\x46\x5b\x68\x69\x5a\x4b\xb7\x98\xa7\xdb\x57\x35\x5f\x57\x71\xe9\xe2\xbe\xc7\x72\xd1\x23\x8e\xcb\x68\xdb\xfd\xf2\xc2\xc2\x25\x74\x5d\x66\xac\xcf\xfb\xc1\x9e\x6e\x43\x66\xa1\xe2\x2d\x09\xfd\xff\xee\xf1\x73\x70\x6e\x63\x63\x1a\xad\x16\xb8\xf6\xf5\xc4\x58\x66\x0b\x43\x35\xb8\xda\x25\xd5\x0a\x10\xd6\xc0\x63\xb1\x40\xae\xe4\x52\x24\xae\xdc\x70\x25\x25\x72\x2b\xd6\xc2\x6e\x2b\x26\xde\xa1\xad\x68\xd8\x5d\x37\x39\xd8\x3d\xff\xeb\x04\x24\xf8\x32\x01\x07\x77\x1a\x63\x8a\x16\x0f\xf8\x6f\xe4\x16\x2a\xc3\x1b\xb7\x4d\xdb\x1b\x4b\x7f\xdd\xfc\x60\xc9\x77\xef\xa0\xf2\x15\x83\x54\x18\x4b\x7e\x0a\x8a\xe6\x80\x0b\x3e\x92\xc8\x49\xf3\xfe\x98\x2b\x68\xed\x47\xbb\xa3\x4f\x36\x7e\x7d\x47\x85\x96\x65\x3d\x74\x05\x55\x67\x2e\x35\x43\x85\x60\xb9\x00\xca\xcc\x9a\xbb\xde\xa1\x0d\xe3\xc9\xb8\x26\x7e\xb2\x7b\xbc\xb7\xc9\xf0\xfc\x87\x6d\x30\x98\x7b\x60\x6f\xcf\x9d\x0e\xca\x22\x2b\x8b\x48\xe4\xf3\xa9\x2a\x25\x13\x65\xc1\xa0\x75\xb7\xd1\xdd\xe0\xee\x73\x34\xff\x3c\x89\x66\x37\xc3\xf1\x6f\xe3\x9b\x11\x5c\xc3\xeb\xab\x52\xf4\x6e\x85\x30\xbb\x9d\xde\x8f\xa3\xf1\x74\x32\x9e\xbc\x73\xb9\x89\x20\x64\x4c\xb5\x0b\x8d\xcb\xd7\x32\x47\x85\x81\x05\x52\x93\xe7\xae\xc0\xc4\x3d\x87\xd2\x50\xbf\x86\xf3\x06\xf6\xed\xe7\xc9\x57\x61\x57\x8c\x70\x51\x96\xb0\xbe\x16\x18\x58\x16\x69\xba\x85\xc2\xd0\x14\xe5\x5f\x55\xa2\x5d\xc3\x45\xf3\x2d\x37\xc3\xe9\x64\x38\xfe\x78\xf8\x4d\xcc\x82\x51\x19\xc2\x46\xe9\x47\xc2\x65\x54\x4f\x30\xdd\x86\xcd\xc4\x4a\x22\x8d\x53\x35\x93\x4e\xc1\x14\x7c\x05\xcc\x40\x91\x27\x9a\xc5\x24\x46\xcb\x19\x73\x06\x2b\x0d\x52\xc5\x58\x0d\x6f\xc1\xb8\x9a\x11\xd7\xf0\xa6\x61\x60\x74\x37\x9d\xcd\xbe\x99\x5e\x9f\xb8\x71\xf0\x5f\xd0\xbc\x86\x9f\x1a\x90\x37\xb7\xb7\xd3\xdb\x17\xf1\x68\xea\x5d\x20\x14\xd2\x53\xe8\x94\xbd\xd6\x35\xbc\x6d\x60\x8d\x6e\xde\xdd\x0e\x46\x37\xa3\x17\xe1\xc2\x78\x6b\x68\x12\xd7\x8e\x44\x22\x4d\x81\x46\x63\xa9\xd7\x92\xbb\x60\x59\x48\xb7\xc0\xd2\xb2\x60\x57\xd8\xd7\xf0\x8f\x2b\x8a\xdc\x0c\x8d\xa1\x41\xac\xdd\xc0\x6a\xf1\xcb\x32\x2c\x27\xf4\xf2\xed\x56\xd1\x5e\xaa\xfe\x18\xd8\xa1\x79\x58\x26\x6e\x7c\xd9\x0b\x3d\x27\x4b\xd3\x66\x39\xae\xba\x0c\x76\x12\x8d\x57\xcf\x82\x5c\x94\x23\xdf\x29\xb9\x10\x3b\x66\xad\x4b\xf1\x5a\xeb\x5e\xa1\x1b\xa3\x5d\x5c\xd8\x86\xd9\x1b\x66\xea\x46\xd3\xd1\xc0\x1d\x62\x88\x4c\x34\x3e\x45\x17\x4a\xa5\xa0\x1e\xf7\x36\x10\xa3\x65\x22\x35\x6d\x26\x82\x2a\xf1\x9e\x2b\x69\xbc\x5f\x83\x61\x63\x8b\x59\x25\xd8\xde\x42\xa3\x55\x7e\x0b\xdb\xa9\x52\x8f\x74\x16\xc9\x5f\xe4\x7a\xa8\x31\x46\x69\x05\x4b\x0d\xe9\xfd\x51\xa0\xde\x56\x47\x85\x7a\x13\x1c\x3c\x44\x75\x59\x5e\xbb\x3e\x6e\x6a\x8b\xea\x71\x2b\x65\x7c\xda\x9a\xad\xb1\x98\xed\x93\x59\xa7\x66\xe4\xd8\x7c\x91\xa0\x76\x4b\xae\x7b\x98\x59\xca\xcf\xda\xbb\xff\xcf\x78\x2a\xac\xa2\xc1\xd3\x6a\xb5\xfd\x1e\x96\x42\x6f\xfe\x1b\x14\xed\x0f\x09\x3b\x73\x87\xaa\x48\xe3\x06\x51\x0b\x2c\xad\x0c\x99\x73\x28\xe8\xa2\x6a\x2e\x23\xd5\x7a\x88\x86\x5d\x85\xc1\xed\xb8\xb7\x42\xf3\xaf\x59\xf2\x43\x82\xe3\xfc\x85\xd7\xfd\xad\x00\x09\x4a\x1f\x0f\x8e\x39\x98\xfb\x76\x74\x20\xb7\xf6\x39\xa8\x0b\xed\x8c\x19\xb5\x12\xab\x4e\xa6\x88\x1b\x36\x1c\x48\xc3\x03\x01\xb5\xeb\x7b\x83\x38\x16\xbe\xd2\x1e\x98\x67\x9a\x53\xf6\x11\x48\x2f\x30\x2f\x77\xd0\xee\x59\xc7\xf5\x9b\x63\x47\x15\x14\x3f\x1d\x22\xa4\x96\x76\xff\xfb\xb4\xd4\xcb\x40\xed\xa0\x62\x55\x79\x4e\xa1\xcb\x23\xb0\x35\xf9\x76\x2b\xff\x6e\xa6\xdf\x1e\x6f\x4d\x8d\x6e\x76\xb0\x7e\x55\x2d\xee\x0c\x78\xa1\x35\x4a\x9b\x86\xa6\x44\xb3\xd1\xc6\x7d\x05\xca\x18\x33\x5f\x6d\xb0\xe5\x38\xad\x96\xf0\xa1\x58\xa0\x96\x68\xb1\xa1\xf5\xf8\xb3\x99\x97\x42\xed\x91\x8d\xce\xe0\x5f\x69\xcc\x83\x87\xc8\xed\x82\x6c\x6a\x7a\xe1\x68\xbb\x15\x06\xde\x0f\x76\x69\xbe\x12\xc9\x6a\xce\xd6\x4c\xa4\x6c\x21\x68\x22\xd9\xa3\x7e\xc9\x16\x5a\xf0\xd0\xef\x0a\xd3\x1a\x2b\xd0\xd2\xcc\x38\x0f\x42\x8e\x77\x22\x3e\xe8\xf2\x66\x6d\x2b\xc2\x17\x32\x37\xc5\x96\x13\x63\xe9\xcc\xd2\x57\xad\x32\xf7\xa5\x31\x24\x22\xd7\x68\x3f\xe0\x76\x1c\x3b\xa0\xc1\x6c\x0c\x03\xce\xd1\x34\x48\x35\x4e\x6a\xfe\x88\xdb\x79\x2b\x55\x76\x18\x5e\xeb\x03\x6e\x2b\x1c\x76\x0c\xc7\x2f\x10\xdc\xfe\x54\x8d\x09\x79\xee\x38\x84\xf6\x02\xce\x37\xc7\xe2\xb1\x74\xe2\x97\xb6\xf3\x47\xcc\x32\x18\xa2\xac\x35\x00\x7a\xe4\x9f\x40\xcc\x2c\x9b\x73\x7f\xfd\x42\x1b\x5d\x14\xa2\xd9\xe8\xbe\xa9\x8b\x06\xac\x5f\x7f\x9f\x82\xb0\x98\x99\x52\x69\xa6\x43\x86\x16\x1a\x63\x2a\x59\x34\xa7\x19\x55\x68\x8e\xcd\x08\x1c\x4b\x63\xdd\x17\xe7\x44\xab\x22\x6f\xb5\x8b\xc1\x43\x54\xae\xbf\xa3\x65\x10\xe1\x6e\xee\xa5\x7d\x0c\xee\x82\x59\xf0\xd5\x1e\x19\xb5\x70\xa9\x91\xb2\x3b\x2d\x56\x8a\xc1\x05\x27\x85\x39\x43\x66\xec\xd9\xf9\x29\xa0\xe5\xbd\x57\x95\x64\xdb\x55\xe7\x57\xfb\x20\x8d\x0c\xf9\x53\x49\x34\x35\xc0\xc5\x29\x94\xd7\x17\xdc\x5d\x6f\x90\xae\xe3\xf6\x9b\x2a\x02\xc2\x2b\xeb\xa8\x73\x8f\x5a\xb1\xff\x5c\xed\xff\x37\xa5\x61\xb3\x42\xe9\x8f\x68\x76\x25\x64\x62\x80\x69\x04\x96\x6a\x64\xf1\xb6\x3c\x14\xb6\x69\x39\xe0\xab\x06\x3d\x14\x66\xf7\xb3\x21\x88\xf8\x14\x16\x29\x93\x8f\x2e\x8e\xe9\xbf\xae\x47\x04\x3a\xf6\xd1\xfd\x56\x15\xdd\x53\x58\x8a\x34\xc5\x18\xc4\xd2\xfd\xd1\x81\x0c\xa0\xf0\xb8\x9f\x0d\xdb\x4c\xae\x73\xde\x48\xbc\x72\x76\x42\x5e\x68\xe2\xcf\x39\xb9\xad\x64\xc2\xaa\x0f\x01\xaf\x7f\x71\xd5\xb6\x77\x3c\xf8\x04\x5a\xa5\xd8\x1e\x90\xe0\x84\x69\xb9\xe7\x52\xc1\xb2\x39\x49\xcf\x99\x96\xbb\xe8\xdc\x31\xdb\x0a\x52\x88\x71\x29\x24\x02\x03\xbb\xcd\xd1\x9d\xb1\x65\x91\x2d\xa8\x8e\x2e\xab\x10\x35\x6d\x9a\x9b\x91\xdc\x60\xb8\xc2\x77\x78\x27\xd9\xdb\x5e\xca\x74\x82\x47\x02\xd0\x09\xb5\x49\xfb\x24\xa4\xc8\x8a\xec\x90\x21\x70\x12\xe3\x92\x15\xa9\x75\x79\xfe\x27\x6a\xb5\x83\x14\xd2\xbe\xb9\x80\x4c\xc8\xf9\x1f\x05\x93\xd6\xd7\xf5\x26\x9d\x9f\xd8\xd3\xdf\x40\x66\x4f\x75\xe4\x37\xb5\xcf\x2e\xfd\x3e\x8d\x9f\xf5\xd6\x47\xa5\x31\xf2\x9f\x8e\x6a\x03\xea\xee\x1b\x11\x7c\x09\x7a\x7e\x50\x25\xd7\x96\xda\xe5\x84\xbd\xaf\xd7\x1e\x6a\x97\xa0\x72\xd4\x7e\x94\xa1\x23\xe5\xf4\xc3\x91\xc3\x4e\x09\x75\xe0\xd3\xd5\x5e\x7a\x58\x96\x94\xdf\x3d\x12\x41\xe7\xc9\x5c\x19\x61\x95\xde\xb6\x7d\x97\x08\x5b\xeb\xe3\xe7\x7b\x71\xbb\x62\x66\x55\x4e\x2f\x84\xc4\x55\x96\x09\x7b\x08\xc5\xaf\xec\x79\xeb\x40\x47\xb7\x1a\xd1\x6d\x95\xa7\xc8\xa4\x2f\x11\x54\xed\x0f\xc2\x92\xf0\xdc\x7f\xbb\xa8\xdc\x15\xa0\x47\x2e\xd5\x97\xbe\x53\xb4\x75\xdd\xc3\x79\xec\xf5\x7e\x6a\xe8\xdd\xef\x3c\x9c\xb8\xde\x1e\xfb\x31\x2f\xcb\x45\xf8\x94\x52\xb7\x41\xd5\xf8\x79\xdb\xc0\x19\x7a\x0d\xbd\x1b\x2e\x6a\x7a\xbc\x5c\x74\xdf\x46\x6a\x5a\xb3\x94\x59\xf2\x1c\x08\xeb\x49\xf0\x82\x7e\x2e\xe8\x83\x2e\xa4\xfb\x63\x5b\x98\x9a\x6a\x88\x79\xa9\x78\x0d\xff\x6c\x17\x84\x72\x4b\xb5\xa0\x70\x4b\x07\x62\x25\xec\x66\x5e\x1f\xa1\xcb\x13\x4f\xe7\xbf\x01\x00\x00\xff\xff\x17\xde\x53\xbf\x22\x1e\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 7714, mode: os.FileMode(420), modTime: time.Unix(1539059969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
