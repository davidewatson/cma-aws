// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x6d\x6f\xdb\x38\xf2\x7f\xef\x4f\x31\xf0\x9b\x7f\xfa\x47\x62\x35\xe9\xee\xdd\x22\xde\x1c\xce\xeb\x74\x5b\xa3\xcd\x03\xea\x6c\x83\xbe\x32\xc6\xd4\x58\xe6\x85\x22\x55\x92\xb2\xe3\x16\xf9\xee\x07\x52\x94\x4d\xc9\x72\x1f\xb6\x7d\x71\x06\xda\x50\xe4\xcc\x68\xe6\x37\x8f\x54\x92\xc0\x58\x15\x1b\xcd\xb3\xa5\x85\xb3\xe7\xa7\xbf\xc1\x14\x73\x53\xca\x0c\xa6\x97\x53\x18\x0b\x55\xa6\x70\x8d\x96\xaf\x08\xc6\x2a\x2f\x4a\xcb\x65\x06\x77\x84\x39\x60\x69\x97\x4a\x9b\x41\x2f\x49\x7a\x49\x02\x6f\x39\x23\x69\x28\x85\x52\xa6\xa4\xc1\x2e\x09\x46\x05\xb2\x25\xd5\x27\xc7\xf0\x9e\xb4\xe1\x4a\xc2\xd9\xe0\x39\x1c\x39\x82\x7e\x38\xea\x3f\x1b\x3a\x11\x1b\x55\x42\x8e\x1b\x90\xca\x42\x69\x08\xec\x92\x1b\x58\x70\x41\x40\x8f\x8c\x0a\x0b\x5c\x02\x53\x79\x21\x38\x4a\x46\xb0\xe6\x76\xe9\xdf\x13\xa4\x38\x4d\xe0\x43\x90\xa1\xe6\x16\xb9\x04\x04\xa6\x8a\x0d\xa8\x45\x4c\x08\x68\x83\xd2\xee\xb7\xb4\xb6\x38\x4f\x92\xf5\x7a\x3d\x40\xaf\xf0\x40\xe9\x2c\x11\x15\xa9\x49\xde\x4e\xc6\x2f\xaf\xa7\x2f\x4f\xce\x06\xcf\x03\xd3\x5f\x52\x90\x31\xa0\xe9\x63\xc9\x35\xa5\x30\xdf\x00\x16\x85\xe0\x0c\xe7\x82\x40\xe0\x1a\x94\x06\xcc\x34\x51\x0a\x56\x39\xa5\xd7\x9a\x3b\xdc\x8e\xc1\xa8\x85\x5d\xa3\x26\x27\x26\xe5\xc6\x6a\x3e\x2f\x6d\x03\xb3\x5a\x45\x6e\x1a\x04\x4a\x02\x4a\xe8\x8f\xa6\x30\x99\xf6\xe1\x8f\xd1\x74\x32\x3d\x76\x42\xee\x27\x77\xaf\x6f\xfe\xba\x83\xfb\xd1\xbb\x77\xa3\xeb\xbb\xc9\xcb\x29\xdc\xbc\x83\xf1\xcd\xf5\xe5\xe4\x6e\x72\x73\x3d\x85\x9b\x3f\x61\x74\xfd\x01\xde\x4c\xae\x2f\x8f\x81\xb8\x5d\x92\x06\x7a\x2c\xb4\xb3\x40\x69\xe0\x0e\x4d\x4a\x3d\x74\x53\xa2\x86\x0a\x0b\x55\xa9\x64\x0a\x62\x7c\xc1\x19\x08\x94\x59\x89\x19\x41\xa6\x56\xa4\xa5\x8b\x84\x82\x74\xce\x8d\xf3\xaa\x01\x94\xa9\x13\x23\x78\xce\x2d\x5a\xbf\xb5\x67\xd7\xa0\xe7\x48\xae\x38\x5b\x22\x09\x78\x4f\x92\x3e\x71\x84\xdf\xf3\x55\xb5\xfa\x77\x96\x23\x17\x03\xa6\xf2\x7f\x39\xba\x91\xe0\x0f\x08\x6f\x51\x1b\x92\xf0\x3b\xba\xa7\x81\xf0\x4f\x31\x61\xcf\x6c\xa4\xc5\x47\xb8\x80\x7e\xa1\x95\x55\x2f\xfa\xc3\x5e\xaf\x40\xf6\xe0\x54\x65\x39\xe2\xda\x0c\x7b\x3d\x9e\x17\x4a\x5b\xe8\x67\x4a\x65\x82\x12\x2c\x78\x82\x52\xaa\xa0\xe9\xc0\x73\xf6\x87\x5b\x32\xff\xcc\x4e\x32\x92\x27\x66\x8d\x59\x46\x3a\x51\x85\x27\xed\x64\xeb\xf5\xaa\x53\x38\xca\x74\xc1\x06\x19\x5a\x5a\xe3\xa6\x3a\x66\xb3\x8c\xe4\x2c\x48\x19\x04\x29\x03\x55\x90\xc4\x82\xaf\xce\xea\x93\x67\x70\x01\x9f\x7b\x00\x5c\x2e\xd4\xb9\x5f\x01\x58\x6e\x05\x9d\x43\x7f\x2c\x4a\x63\x49\xc3\x15\x4a\xcc\x48\xc3\xe8\x7e\x0a\xaf\x49\x14\x6e\x79\x3b\xe9\x0f\x3d\xf1\xaa\x4a\xaf\x73\xe8\xaf\x9e\x0f\x4e\x07\xcf\xc3\x36\x53\xd2\x22\xb3\xb5\x48\xf7\x93\x98\x3b\xa9\x2d\x37\x04\x7a\xf7\x2b\xb5\x38\x87\xbe\xcb\x0c\x73\x9e\x24\x19\xb7\x02\xe7\x0e\xec\xa4\x76\x54\xc2\x72\x3c\xc1\xb5\x89\x78\xc8\x79\xe4\x1c\xfa\xfb\xbe\x0c\x44\x4f\xee\x8f\xff\x8f\x1e\x2d\x69\x89\x62\x96\x2a\x66\x6a\xc5\xbe\xf7\x9d\x29\x19\xa6\xb9\x47\xd3\xd9\xa2\x34\x01\xce\x55\x69\xe1\x1b\xc0\x7a\xea\x01\x18\xb6\xa4\x9c\xcc\x39\xbc\xbe\xbb\xbb\x9d\x0e\xdb\x3b\x6e\x83\x29\x69\x4a\xbf\xd3\x0f\x19\xee\xde\x96\xfc\xc7\x28\xe9\xc5\x14\x5a\xa5\x25\x3b\x74\xfe\x34\xec\xf5\x0c\xe9\x15\x67\xb4\xd5\xa9\x32\xd5\x25\x2e\x17\xc2\xf1\xaf\xb8\x2f\x89\x08\xac\xa2\xf0\xe7\xba\x60\x30\xd6\x84\x96\x6a\xbe\xa3\xc6\xe3\x95\xc9\x9e\x81\x26\x5b\x6a\x69\x5a\x47\xef\xa8\x10\x9b\x67\x91\xaf\xb7\x71\xe9\xe3\x7e\x80\x05\x1f\x38\x8c\xeb\x68\xdb\xfd\x8a\xd2\xc2\x39\xf4\x7d\x66\xac\x4e\x93\xa0\x4f\xbf\x41\x33\x57\xe9\xc6\x11\xfd\xff\x6e\xfb\x29\x38\xb7\x61\x98\x26\xab\x39\xad\xaa\x7a\x62\x2c\xda\xd2\xb8\x1a\xbc\xb5\xd2\xd5\x0a\xe0\xd6\xc0\x43\x39\x27\xa6\xe4\x82\x67\xbe\xdc\x30\x25\x25\x31\xcb\x57\xdc\x6e\xb6\x48\xbc\x22\xbb\x85\x61\xb7\x6e\x62\xb0\xdb\xff\xfb\x00\x64\xf4\x65\x00\x3a\x2d\x4d\x49\x90\xa5\x0e\xff\x5d\xfa\x83\xad\xe2\x8d\xc7\xa6\xee\x8d\xa3\xbf\xaf\x7e\xd0\xe4\xbb\x2d\xd8\xfa\x0a\x41\x70\x63\x9d\x9f\x02\xa3\xe9\x70\xc1\x5b\x47\x72\xd4\x7c\x3e\xe4\x0a\x77\xf6\xb3\xdd\x91\x38\x1d\xbf\x6e\x51\xa9\x65\x5d\x0f\x7d\x41\xd5\xb9\x4f\xcd\x50\x21\xb0\xe0\xe0\x32\x33\x72\xd7\x2b\xb2\x61\x3c\x99\x44\xe4\x47\xbb\xed\x3d\x23\xc3\xfe\x4f\x33\x30\xa8\xdb\x61\xdb\x53\xaf\x97\x93\x31\xae\x9d\xb5\xcb\xc0\xae\xa0\x5c\x63\x4e\xf5\x9c\x53\x67\x99\x55\x30\xa7\x5d\x95\xa1\xd4\x13\xbb\xa9\x42\x66\xbe\x09\xc0\x05\x9c\x0e\x6b\x09\x77\xcb\x40\xeb\x7a\x76\xdd\xf4\x3d\x0e\x9e\xa2\xf1\xea\xdb\x40\x37\x2d\x88\xed\x98\x2e\xe0\x6c\x78\x50\x5b\x0f\x54\x54\x00\x97\xe4\x87\x11\xa5\xfd\xbc\x17\xab\xbd\x46\x13\x2b\xed\x06\x2c\x3f\x0a\xba\x89\x8b\x8c\xed\x55\x95\x48\x09\x50\x0f\x7b\x06\xa4\x64\x91\x0b\xd3\x46\x22\xb0\x82\x26\x53\x28\x69\xa8\xb2\xa8\x3a\x9c\x58\xca\xb7\x84\x6d\x13\x1a\x05\xe7\x5b\xd0\x16\x4a\x3d\xb8\x89\xae\xf8\x22\xd6\x63\x4d\x29\x49\xcb\x51\x18\xc7\xf7\xb1\x24\xbd\xd9\x0e\x5c\x71\x29\x19\xdd\x4f\x63\x5a\x16\xad\x0f\xab\xda\x82\x7a\x62\x1a\x7a\x72\x59\x95\xe5\x8d\xb1\x94\xef\x83\x19\x43\x73\xe9\xd1\xfc\x22\x40\xed\xc2\x16\x7b\x18\xad\x9b\x63\xa3\x77\xff\x9f\xa9\xa0\xb0\xca\xb5\x6f\xab\xd5\xe6\x7b\x50\x0a\x15\xee\x07\x20\xda\x2f\xb5\x3b\x75\xc7\xaa\x14\x69\x03\xa8\x39\xd5\x5a\x86\xcc\xe9\x0a\xba\xe9\xb6\xbb\x39\xd6\x38\x44\x83\x55\xa1\xfd\x1d\xf6\x56\x28\xa1\x91\x26\x3f\x25\x38\x4e\xbf\xf0\xba\x1f\x0a\x90\xc0\xf4\xb6\xb3\x59\x50\xe1\x52\x3e\xed\xca\xad\x7d\x0c\x62\xa2\x9d\x32\x97\xad\xc4\x8a\xc1\xe4\x69\x43\x87\x8e\x34\xec\x08\xa8\xb3\x61\x57\x48\x9a\x86\xe3\x3a\xb8\xb7\x8e\x7b\xd1\xa5\x74\x94\x1a\xff\xdb\xaa\x77\xf0\x47\x53\x97\x55\xf5\xd0\xe5\x96\x07\xc4\x45\xf4\x17\xf0\xcb\xe1\x12\xdf\xe8\x0a\x9d\x75\x60\xdb\x2a\x4e\x80\x95\x5a\x93\xb4\x22\x14\x77\x6e\x00\xd7\xfe\x4e\x9a\x23\x9a\xaf\x36\xaa\xba\xb9\xab\x05\xbc\x29\xe7\xa4\x25\x59\x6a\x70\x3d\xfc\x66\x66\x35\x51\x8c\xa3\x63\x76\x37\x82\xaf\x34\xb8\xd1\xfd\xd4\x5b\xe1\x74\x6a\xc2\x78\xb0\x6d\x71\x03\xaf\x47\xbb\x74\x59\xf2\x6c\x39\xc3\x15\x72\x81\x73\x2e\xb8\xdd\x54\xd8\x45\x6a\x2c\x70\xae\x39\x0b\x7d\xa3\x34\xad\xf6\x4c\x76\xad\xf4\xc3\x2c\x10\x5d\xc0\xaf\xc3\x9e\x03\x3e\xf0\xb2\x66\x8d\x28\xc3\x7d\x9d\x39\x1b\x1c\x7b\xec\xc9\xda\x57\xad\x72\xf1\x39\xd6\x65\x4a\x4c\x93\x7d\x43\x9b\x49\xea\x05\x8d\x6e\x27\x30\x62\x8c\x4c\x03\x54\xe3\xa9\x66\x0f\xb4\x99\xb5\xc2\x79\x27\xa3\xe2\x7a\x43\x9b\xad\x1c\x3c\x24\xa7\x3a\x70\xe2\xf6\x5c\xf4\x8e\x32\xe7\xb9\xc3\x22\x74\x45\xb0\x97\x9d\x5d\x4e\xfc\xdc\x76\xfe\x25\x5a\x84\x31\xc9\xa8\x90\xba\xad\x6a\x07\x52\xb4\x38\x63\xd5\xfa\x0b\xed\x68\x5e\xf2\x66\xc3\xf8\xa6\x6e\x14\x64\xfd\xf1\xe1\x06\xb8\xa5\xdc\xd4\x4c\xb7\x3a\xa4\x58\xa9\x29\x75\x65\xc5\xcd\x3b\x46\x95\x9a\x51\x33\x02\x27\xd2\x58\xff\xfd\x2b\xd3\xaa\x2c\x5a\x65\x77\x74\x3f\xad\xcf\x5f\xb9\x63\xe0\xe1\x69\x56\x51\x57\x31\xb8\x0b\x66\xce\x96\x7b\x60\x44\xe1\x12\x81\xb2\x9b\x5d\xb7\x8c\xc1\x05\x47\xa5\x39\x21\x34\xf6\xe4\xf4\x18\xc8\xb2\xc1\xb3\x2d\x65\xdb\x55\xa7\xc3\x7d\x21\x8d\x0c\xf9\xa4\x24\x99\x48\xe0\xfc\x18\xea\xf5\x19\xf3\xeb\x35\xb9\x75\xda\x7e\xd3\x16\x80\xf0\xca\x58\xea\xac\x92\xba\x45\xff\x69\x6b\xff\x9f\x4a\xc3\x7a\x49\x12\x8c\xca\xfd\xe7\x46\x99\x19\x40\x4d\x80\x42\x13\xa6\x9b\x2a\x9d\x42\x5e\x46\xb0\x74\xf8\xaa\x01\x8f\x0b\xb3\xf7\xb7\x63\xe0\xe9\x31\xcc\x05\xca\x07\x1f\xc7\xee\x5f\xbf\x92\x08\x4a\x56\xf9\xba\x51\x65\xff\x18\x16\x5c\x08\x4a\x81\x2f\xfc\x27\x50\xa7\x80\x0b\x8f\xf7\xb7\xe3\x36\x92\xab\x82\x35\x12\xaf\x9e\x41\x88\x95\xda\xe1\xe7\x9d\xdc\x66\x32\xe1\xb4\x0a\x81\x8a\xff\x6c\xd8\xd6\x77\x32\xba\x02\xad\x04\xb5\x07\x0d\x38\x42\x2d\xf7\x5c\xca\x31\x9f\x39\xea\x19\x6a\xb9\x8b\xce\x1d\xb2\xad\x20\x85\x94\x16\x5c\xba\x2b\xa6\xdd\x14\xe4\x6f\xff\xb2\xcc\xe7\xae\x8e\x2e\xb6\x21\x6a\xda\x30\x37\x23\xb9\x81\xf0\x56\xbe\x97\x77\x94\xff\x3a\x10\xa8\x33\x3a\x10\x80\x9e\xa8\x0d\xda\x15\x97\x3c\x2f\xf3\x2e\x45\xe0\x28\xa5\x05\x96\xc2\xfa\x3c\xff\x44\x5a\xed\x44\x72\x69\x5f\x9c\x41\xce\xe5\xec\x63\x89\xd2\x56\x75\xbd\x09\xe7\x15\x3e\xfe\x80\x64\x7c\x8c\x25\xbf\x88\x2e\x81\x49\xe2\xc6\xb8\xb8\xf5\xb9\xd2\x38\xad\x2e\xb2\xd1\xa0\xb7\xbb\xb1\xc2\xe7\xc0\x57\x0d\x7c\xce\xb5\x35\x77\x3d\xa9\xee\xf3\xb5\x87\xc3\x05\xa8\x82\x74\x75\x21\x76\x57\xb3\x9b\x37\x07\x2e\x0d\xb5\xa8\x8e\x8b\xf4\x5e\x7a\x58\xcc\x40\x55\x73\x66\xc6\xdd\xbd\xac\x50\x86\x5b\xa5\x37\x6d\xdf\x65\xdc\x46\x7d\xfc\x74\x2f\x6e\x97\x68\x96\xf5\x24\xe4\x24\x31\x95\xe7\xdc\x76\x49\xa9\x4e\xf6\xbc\xd5\xd1\xd1\xad\x26\xf2\xa6\x32\x41\x28\xab\x12\xe1\xaa\x7d\xa7\x58\x47\x3c\x73\x03\x17\xed\xdc\x15\x44\x5f\xfa\x54\x5f\x54\x9d\xa2\xcd\xeb\x37\x67\x69\xc5\xf7\x4b\x83\xef\xfd\xce\xc3\x99\xef\xed\x69\x35\xa7\xe5\x05\x17\xb4\xa7\x83\x8a\xf0\xf9\xb5\x21\x67\x5c\x71\xe8\xdd\x70\x11\xf1\xb1\xfa\xf0\x02\xfe\xd1\xe0\xba\x15\x68\x9d\xe7\x80\xdb\x0a\x84\x8a\xb0\x9a\x0b\x12\xd0\xa5\xf4\x9f\xfe\xc3\xd4\x14\x49\x2c\x6a\xc6\x0b\xf8\x67\xbb\x20\xd4\x26\x45\x41\xe1\x8f\x3a\x62\x25\x58\x33\x8b\xbf\xdb\xd4\x37\x87\xde\x7f\x03\x00\x00\xff\xff\x83\xfd\x61\x8c\xb0\x1a\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6832, mode: os.FileMode(420), modTime: time.Unix(1536710995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
