// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x6f\xdb\x38\x12\xff\xee\xbf\x62\xe0\x2f\x97\x1e\x12\xab\x4d\xb7\x77\x8b\x78\x73\x38\xaf\xd3\x6d\x8d\x36\x0f\xd4\xd9\x06\xfd\x64\x8c\xa9\xb1\xcc\x0b\x45\x6a\x49\xca\x8e\x5b\xe4\x7f\x3f\xf0\x21\x59\x92\x95\xb6\xfb\xf8\xb0\x06\xda\x50\x9c\x87\x66\x7e\xf3\xe0\x50\x49\x02\x53\x55\xec\x34\xcf\xd6\x16\x4e\x9f\xbf\xf8\x11\xe6\x98\x9b\x52\x66\x30\xbf\x98\xc3\x54\xa8\x32\x85\x2b\xb4\x7c\x43\x30\x55\x79\x51\x5a\x2e\x33\xb8\x25\xcc\x01\x4b\xbb\x56\xda\x8c\x06\x49\x32\x48\x12\x78\xcf\x19\x49\x43\x29\x94\x32\x25\x0d\x76\x4d\x30\x29\x90\xad\xa9\xa2\x1c\xc3\x47\xd2\x86\x2b\x09\xa7\xa3\xe7\x70\xe4\x18\x86\x91\x34\x7c\x36\x76\x2a\x76\xaa\x84\x1c\x77\x20\x95\x85\xd2\x10\xd8\x35\x37\xb0\xe2\x82\x80\x1e\x18\x15\x16\xb8\x04\xa6\xf2\x42\x70\x94\x8c\x60\xcb\xed\xda\xbf\x27\x6a\x71\x96\xc0\xa7\xa8\x43\x2d\x2d\x72\x09\x08\x4c\x15\x3b\x50\xab\x26\x23\xa0\x8d\x46\xbb\xdf\xda\xda\xe2\x2c\x49\xb6\xdb\xed\x08\xbd\xc1\x23\xa5\xb3\x44\x04\x56\x93\xbc\x9f\x4d\x5f\x5f\xcd\x5f\x9f\x9c\x8e\x9e\x47\xa1\x5f\xa5\x20\x63\x40\xd3\x6f\x25\xd7\x94\xc2\x72\x07\x58\x14\x82\x33\x5c\x0a\x02\x81\x5b\x50\x1a\x30\xd3\x44\x29\x58\xe5\x8c\xde\x6a\xee\x70\x3b\x06\xa3\x56\x76\x8b\x9a\x9c\x9a\x94\x1b\xab\xf9\xb2\xb4\x2d\xcc\x2a\x13\xb9\x69\x31\x28\x09\x28\x61\x38\x99\xc3\x6c\x3e\x84\x9f\x27\xf3\xd9\xfc\xd8\x29\xb9\x9b\xdd\xbe\xbd\xfe\xf5\x16\xee\x26\x1f\x3e\x4c\xae\x6e\x67\xaf\xe7\x70\xfd\x01\xa6\xd7\x57\x17\xb3\xdb\xd9\xf5\xd5\x1c\xae\x7f\x81\xc9\xd5\x27\x78\x37\xbb\xba\x38\x06\xe2\x76\x4d\x1a\xe8\xa1\xd0\xce\x03\xa5\x81\x3b\x34\x29\xf5\xd0\xcd\x89\x5a\x26\xac\x54\x30\xc9\x14\xc4\xf8\x8a\x33\x10\x28\xb3\x12\x33\x82\x4c\x6d\x48\x4b\x97\x09\x05\xe9\x9c\x1b\x17\x55\x03\x28\x53\xa7\x46\xf0\x9c\x5b\xb4\x7e\xeb\xc0\xaf\xd1\xc0\xb1\x5c\x72\xb6\x46\x12\xf0\x91\x24\x7d\xe6\x08\x3f\xe5\x9b\xb0\xfa\x6f\x96\x23\x17\x23\xa6\xf2\xff\x38\xbe\x89\xe0\xf7\x08\xef\x51\x1b\x92\xf0\x13\xba\xa7\x91\xf0\x4f\x4d\xc6\x81\xd9\x49\x8b\x0f\x70\x0e\xc3\x42\x2b\xab\x5e\x0e\xc7\x83\x41\x81\xec\xde\x99\xca\x72\xc4\xad\x19\x0f\x06\x3c\x2f\x94\xb6\x30\xcc\x94\xca\x04\x25\x58\xf0\x04\xa5\x54\xd1\xd2\x91\x97\x1c\x8e\x6b\x36\xff\xcc\x4e\x32\x92\x27\x66\x8b\x59\x46\x3a\x51\x85\x67\xed\x15\x1b\x0c\x02\x15\x8e\x32\x5d\xb0\x51\x86\x96\xb6\xb8\x0b\x64\xb6\xc8\x48\x2e\xa2\x96\x51\xd4\x32\x52\x05\x49\x2c\xf8\xe6\xb4\xa2\x3c\x83\x73\xf8\x32\x00\xe0\x72\xa5\xce\xfc\x0a\xc0\x72\x2b\xe8\x0c\x86\x53\x51\x1a\x4b\x1a\x2e\x51\x62\x46\x1a\x26\x77\x73\x78\x4b\xa2\x70\xcb\x9b\xd9\x70\xec\x99\x37\xa1\xbc\xce\x60\xb8\x79\x3e\x7a\x31\x7a\x1e\xb7\x99\x92\x16\x99\xad\x54\xba\x9f\xc4\xdc\x69\xed\x84\x21\xf2\xbb\x5f\xa9\xc5\x19\x0c\x5d\x65\x98\xb3\x24\xc9\xb8\x15\xb8\x74\x60\x27\x55\xa0\x12\x96\xe3\x09\x6e\x4d\x43\x86\x5c\x44\xce\x60\x78\x18\xcb\xc8\xf4\xe8\xfe\xf8\xff\xe8\xc1\x92\x96\x28\x16\xa9\x62\xa6\x32\xec\xf7\xbe\x33\x25\xc3\x34\xf7\x68\x3a\x5f\x94\x26\xc0\xa5\x2a\x2d\x7c\x07\x58\x8f\x03\x00\xc3\xd6\x94\x93\x39\x83\xb7\xb7\xb7\x37\xf3\x71\x77\xc7\x6d\x30\x25\x4d\xe9\x77\x86\xb1\xc2\xdd\xdb\x92\xff\x19\x25\xbd\x9a\x42\xab\xb4\x64\x4f\xd1\x1f\xc7\x83\x81\x21\xbd\xe1\x8c\x6a\x9b\x82\xab\xae\x70\xb9\x10\x4e\x7e\xc3\x7d\x4b\x44\x60\x81\xc3\xd3\x75\xc1\x60\xaa\x09\x2d\x55\x72\x47\xad\xc7\x4b\x93\x3d\x03\x4d\xb6\xd4\xd2\x74\x48\x1f\xa8\x10\xbb\x67\x8d\x58\xd7\x79\xe9\xf3\x7e\x84\x05\x1f\x39\x8c\xab\x6c\xdb\xff\x8a\xd2\xc2\x19\x0c\x7d\x65\x6c\x5e\x24\xd1\x9e\x61\x8b\x67\xa9\xd2\x9d\x63\xfa\xe7\x7e\xfb\x31\x06\xb7\xe5\x98\x26\xab\x39\x6d\x42\x3f\x31\x16\x6d\x69\x5c\x0f\xae\xbd\x74\xbd\x02\xb8\x35\x70\x5f\x2e\x89\x29\xb9\xe2\x99\x6f\x37\x4c\x49\x49\xcc\xf2\x0d\xb7\xbb\x1a\x89\x37\x64\x6b\x18\xf6\xeb\x36\x06\xfb\xfd\x3f\x0e\x40\x46\x5f\x07\xa0\xd7\xd3\x94\x04\x59\xea\x89\xdf\x85\x27\xd4\x86\xb7\x1e\xdb\xb6\xb7\x48\x7f\xdc\xfc\x68\xc9\xef\xf6\xa0\x8e\x15\x82\xe0\xc6\xba\x38\x45\x41\xd3\x13\x82\xf7\x8e\xe5\xa8\xfd\xfc\x54\x28\x1c\xed\xaf\x0e\x47\xe2\x6c\xfc\xb6\x47\xa5\x96\x55\x3f\xf4\x0d\x55\xe7\xbe\x34\x63\x87\xc0\x82\x83\xab\xcc\x46\xb8\xde\x90\x8d\xe3\xc9\xac\xc1\x7e\xb4\xdf\x3e\x70\x32\xee\xff\x65\x0e\x46\x73\x7b\x7c\x7b\x1c\x0c\x72\x32\xc6\x1d\x67\xdd\x36\xb0\x6f\x28\x57\x98\x53\x35\xe7\x54\x55\x66\x15\x2c\x69\xdf\x65\x28\xf5\xcc\x6e\xaa\x90\x99\x3f\x04\xe0\x1c\x5e\x8c\x2b\x0d\xb7\xeb\xc8\xeb\xce\xec\xea\xd0\xf7\x38\x78\x8e\xd6\xab\x6f\x22\xdf\xbc\x20\xb6\x17\x3a\x87\xd3\xf1\x93\xd6\x7a\xa0\x1a\x0d\x70\x4d\x7e\x18\x51\xda\xcf\x7b\x4d\xb3\xb7\x68\x9a\x46\xbb\x01\xcb\x8f\x82\x6e\xe2\x22\x63\x07\xa1\x13\x29\x01\xea\xfe\xc0\x81\x94\x2c\x72\x61\xba\x48\x44\x51\xd0\x64\x0a\x25\x0d\x05\x8f\x02\x71\x66\x29\xaf\x19\xbb\x2e\xb4\x1a\xce\xf7\xa0\x2d\x94\xba\x77\x13\x5d\xd1\x8f\x75\xaf\xea\x0e\x34\x33\xd3\xd2\xcb\x65\x68\xa3\x3b\x63\x29\x3f\x74\xbe\xe9\xca\x85\xf7\xfe\xab\x0e\x75\x1b\x51\x33\x22\x68\xdd\xdc\xd9\x78\xf7\x3f\x4c\x30\xdd\x2a\x77\xdc\x5a\xad\x76\xdf\xf4\xea\xb0\x9b\xed\xdf\x30\x55\xa5\x48\x5b\xbe\x2d\xa9\x52\x1c\x93\xb3\x2f\xae\xf3\xfa\x00\x71\xa2\xcd\x2c\x88\x86\xc4\x13\xe6\xe9\xd8\xc5\x2e\x05\x5f\x9e\x26\xff\xa9\x18\x44\xa1\xf7\xbd\xfd\x93\x0a\x57\x05\x69\x5f\xba\x1d\xda\xdc\x64\xda\x1b\x73\xd1\xc9\xb5\xa6\xf3\x3c\x6d\xd9\xd0\x93\x99\x3d\x31\x3b\x1d\xf7\x45\xdd\xb4\x80\xee\x91\xae\x81\x7e\xd9\x67\x74\x23\xfb\xfe\xde\xa6\xf7\xc8\x37\x06\x11\xab\xaa\x39\xc4\x2d\x9f\x50\xd7\xe0\x3f\x87\x1f\x9e\xee\x7a\xad\x46\xd9\x5b\x6a\x75\xf7\x3c\x01\x56\x6a\x4d\xd2\x8a\xd8\xef\xb8\x01\xdc\xfa\x6b\x5a\x8e\x68\xbe\xd9\xbb\xab\xf3\x4e\xad\xe0\x5d\xb9\x24\x2d\xc9\x52\x4b\xea\xfe\x47\xb3\xa8\x98\x3c\x8e\x9e\xa8\x24\xa9\x55\x6d\xc5\xa2\x79\x5a\xee\xcf\xab\xf8\x0a\x37\x4a\x1f\x9e\x0c\x07\xa7\xc3\xe4\x6e\xee\xfd\x75\xd6\xd7\x80\x3f\x0e\xbe\xa3\xf5\x73\x03\x6f\x27\xfb\xfa\x5a\xf3\x6c\xbd\xc0\x0d\x72\x81\x4b\x2e\xb8\xdd\x05\xb0\x1b\x16\xad\x70\xa9\x39\x8b\xbd\xb7\x34\x9d\x23\x8e\xec\x56\xe9\xfb\x45\x64\x3a\x87\x57\xe3\xc1\x93\x91\xaa\x8c\xfe\x32\xe8\x38\x7c\x81\x16\x61\x4a\xb2\xca\x80\xc9\xdd\xdc\x6d\x85\x1d\x48\xd1\xe2\x82\x85\x75\x33\x22\x53\x4d\x29\x49\xcb\x51\x18\x6f\x5d\xc9\xdb\xad\xaf\x52\xd5\xe4\x63\x8d\x75\x33\xd1\x7f\xfe\x74\x0d\xdc\x52\x6e\x2a\xa1\x1b\x1d\x93\xaf\xd4\x94\xba\x82\x73\x87\xa3\x51\xa5\x66\xd4\x4e\xf1\x99\x34\xd6\x7f\x2c\xc9\xb4\x2a\x8b\x4e\x43\x9a\xdc\xcd\x2b\xfa\x1b\x47\x06\x1e\x9f\x16\x81\x3b\x80\xbd\x8f\x1a\x67\xeb\x03\x30\x2a\x28\xdb\xa0\xb4\x12\x27\x08\x6a\xca\xfc\x58\x54\x9a\x13\x42\x63\x4f\x5e\x1c\x03\x59\x36\x7a\x56\x73\xc6\x98\x45\xbe\x1a\xca\x96\x92\x56\x2a\x7c\x56\x92\x4c\x43\xe1\xf2\x18\xaa\xf5\x29\xf3\xeb\x2d\xb9\x75\xda\x7d\x53\x0d\x40\x7c\x65\x53\xeb\x22\x68\xad\xd1\xdf\x67\xad\x4b\x07\xd6\x0e\x6a\x19\xbf\x92\x30\x97\x47\x4e\x53\x37\xbe\x0d\x74\x9a\x71\x3e\xa8\xab\x39\x31\x4d\xf6\x1d\xed\x66\xa9\x57\x38\xb9\x99\xc1\x84\x31\x32\xa6\x0b\x8f\xf1\x9c\x8b\x7b\xda\x2d\x9a\xdd\xf3\x40\x57\x90\x7e\x47\xbb\x5a\x1f\x7e\x4d\x5f\x20\x3a\xb5\x7d\xae\xff\xa2\x34\x6c\xd7\x24\xc1\xa8\xdc\x7f\x96\x93\x99\x01\x74\x17\x6e\xa1\x09\xd3\x5d\x00\x20\xd6\x5e\xc3\xe7\x9e\x34\x3d\x70\xfd\xe3\xcd\x14\x78\x7a\x0c\x4b\x81\xf2\xde\x1b\xeb\xfe\x0d\x83\x46\xd7\x9c\xfc\xf3\x4e\x95\xc3\x63\x58\x71\x21\x28\x05\xbe\xf2\x9f\x0a\x9d\x01\xae\x32\x3e\xde\x4c\xbb\x5e\x6d\x0a\xd6\x07\xcf\x9c\x58\xa9\x5d\xea\xf8\xfc\xee\x81\xc2\x53\x43\xf6\x07\xf9\xd3\x03\x78\x67\x93\x4b\xd0\x4a\xec\x3f\x8f\x55\xad\xeb\x08\xb5\x3c\xc8\x66\x8e\xf9\xc2\x71\x2f\x50\xcb\xbe\x56\xd8\xa9\x4f\x48\x69\xc5\xa5\xbb\x8a\xd9\x5d\x41\xfe\x96\x2c\xcb\x7c\xe9\x7a\xe5\xaa\xae\x4e\xd3\x85\xb9\x5d\xc4\x2d\x84\x6b\xfd\x5e\xdf\x51\xfe\x6a\x24\x50\x67\xf4\x44\xed\x79\xa6\x2e\x68\x97\x5c\xf2\xbc\xcc\xfb\x0c\x81\xa3\x94\x56\x58\x0a\xeb\xab\xe1\x33\x69\xb5\x57\xc9\xa5\x7d\x79\x0a\x39\x97\x8b\xdf\x4a\x94\x36\xf4\xee\x36\x9c\x97\xf8\xf0\x27\x34\xe3\x43\x53\xf3\xcb\xc6\x65\x29\x49\xdc\x6c\xd7\x3c\x0f\x5d\xfe\xcf\xc3\x85\xaf\x31\xfd\xed\x6f\x76\x61\x30\x4c\x12\x08\x53\xa0\x0b\x6d\x25\x5d\x8d\x9b\x87\x72\xdd\x89\x71\x05\xaa\x20\x1d\x4e\x4e\x77\x85\xb9\x7e\xf7\xc4\xb0\x5e\xa9\xea\xb9\x70\x1e\x94\x87\xc5\x0c\x54\x18\x3e\x33\xee\xee\x2f\x85\x32\xdc\x2a\xbd\xeb\xc6\x2e\xe3\xb6\x71\xb8\x1f\xb6\x85\x35\x9a\x75\x35\x1e\x39\x4d\x4c\xe5\x39\xb7\x7d\x5a\x02\xe5\x20\x5a\x3d\xa7\xb6\xd5\x44\xde\x55\x26\x08\x65\x68\x11\xee\xa0\xeb\x55\xeb\x98\x17\x6e\x0a\xa3\x7d\xb8\xa2\xea\x0b\x5f\xea\xab\x70\x48\x76\x65\xfd\xe6\x22\x0d\x72\x3f\xb4\xe4\x3e\xee\x23\x9c\xf9\x6e\x9c\x86\xe1\x2d\x2f\xb8\xa0\x03\x1b\x54\x03\x9f\x57\x2d\x3d\xd3\x20\xa1\xf7\x03\x44\x43\x8e\x55\xc4\x73\xf8\x57\x4b\xea\x46\xa0\x75\x91\x03\x6e\x03\x08\x81\x31\x74\xf0\x04\x74\x29\xfd\x27\xf2\xc6\x90\x14\x35\x16\x95\xe0\x39\xfc\xbb\xdb\x10\x2a\x97\x1a\x49\xe1\x49\x3d\xb9\x12\xbd\x69\x4d\x6c\xd5\x75\x62\xf0\xff\x00\x00\x00\xff\xff\x41\xce\x0a\x78\xd8\x19\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6616, mode: os.FileMode(420), modTime: time.Unix(1535763765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
