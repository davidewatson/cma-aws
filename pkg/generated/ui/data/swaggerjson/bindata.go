// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xff\x6f\xdb\xba\x11\xff\x3d\x7f\xc5\x41\x1b\xb0\x0e\x48\xe3\xb6\xc3\x80\xa1\x3f\x2d\x4b\xb0\x3e\xa3\x2f\x7b\xc1\x32\x34\x18\xf6\x0a\xe3\x4c\x9d\x25\xbe\x48\xa4\x4a\x52\x76\xdd\x21\xff\xfb\x70\x14\x6d\x7d\xb1\xe4\xd8\x72\xdb\x65\xc3\x2b\x50\xd4\x35\xc9\xbb\xe3\x7d\x3e\x3c\xde\x1d\xfd\xef\x33\x80\xc8\xae\x30\x49\xc8\x44\x6f\x21\x7a\x73\xf1\x2a\x3a\xe7\xef\xa4\x5a\xe8\xe8\x2d\xf0\x38\x40\xe4\xa4\xcb\x88\xc7\xaf\xb2\xd2\x3a\x32\x70\x83\x0a\x13\x32\x70\x79\x7f\x07\x3f\x50\x56\xf0\xc7\xdb\xa9\x5f\x0a\x10\x2d\xc9\x58\xa9\x15\x2f\x58\xbe\xba\x78\x1d\x64\x02\x44\x42\x2b\x87\xc2\x6d\x05\x03\x44\x0a\x73\x2f\xf9\x46\x8a\x14\x29\x83\x0f\xa4\xe8\x8b\xc4\xb0\x02\x20\x2a\x4d\xc6\xe3\xa9\x73\x85\x7d\x3b\x99\x24\xd2\x65\x38\xbf\x10\x3a\x9f\xe4\xcb\x6a\xee\x44\xe4\xf8\x12\x57\xb6\x5e\x43\x39\x4a\xbf\x6a\x33\xe5\xcf\x09\x7f\xc3\xab\x22\x3f\xe7\xf1\x0c\xe0\xd1\x6f\xd4\x8a\x94\x72\xb2\xd1\x5b\xf8\x57\x65\xa3\x57\xb4\x31\x98\xff\xc3\x2b\x3e\xfa\xb9\x42\x2b\x5b\xb6\x26\x63\x51\x64\x52\xa0\x93\x5a\x4d\x7e\xb1\x5a\xd5\x73\x0b\xa3\xe3\x52\x1c\x38\x17\x5d\x6a\x6b\x6f\x4f\xb0\x90\x93\xe5\xeb\x89\xa8\x9c\xdd\xf4\x56\x42\x4d\xe7\xb1\xf9\x65\x9e\xa3\x59\xf3\x5e\xef\x65\x96\x81\x21\x67\x24\x2d\x09\x5c\x4a\x60\x1d\xba\xd2\x82\x5e\x00\x42\x10\x06\xa8\x62\x90\xce\xc2\x43\x39\x27\xa1\xd5\x42\x26\xb0\xd0\x06\x84\x56\x8a\x84\x93\x4b\xe9\xd6\x5b\x3f\x02\x44\xba\x20\xe3\x4d\x9e\xc6\xac\xe3\x1d\xb9\x40\x81\xe6\x24\x43\xb6\xd0\xca\x92\x6d\xd9\x06\x10\xbd\x79\xf5\xaa\xf3\x15\x40\x14\x93\x15\x46\x16\x2e\x30\xa4\x21\xa8\xda\x11\x03\x82\x3b\xcb\x00\xa2\xdf\x1a\x5a\xf0\x8a\xdf\x4c\x62\x5a\x48\x25\x59\x82\x65\xf0\x71\x65\x6b\xc3\xfe\x4e\x45\xb6\x8e\x5a\x6b\x1f\xcf\xfa\x3e\x3f\x36\x76\x50\xa0\xc1\x9c\x1c\x99\x1a\xaf\xea\x4f\xc7\xf6\x0d\x5b\xfd\xbf\xe7\x7b\xf7\xf5\x37\xcc\x89\x5d\xcf\x40\x6c\x9c\xef\x34\xcc\x09\x32\xad\x1f\x28\x86\xb2\xb8\xe8\x8a\x90\x7e\xe5\xa7\x92\xcc\xba\x3b\x64\xe8\x53\x29\x0d\x31\x0a\x0b\xcc\x2c\x75\x86\xdd\xba\xf0\x86\x59\x67\xa4\x4a\xa2\xde\x0d\x7f\x6c\x6c\xd8\x61\xd2\xdd\xea\xe6\x70\xd7\x8b\x3f\x9e\x75\x3c\x15\xc5\x94\x91\xa3\xfd\x14\xac\xe6\xd4\x94\xdb\x43\xa7\x6b\x3f\xf5\x79\x32\xaa\x65\xdb\x73\x21\xd5\x7d\x8a\x0e\xa4\x6d\x92\xea\x77\x16\x78\x21\x73\x2b\x26\xeb\x8c\x5e\xff\xef\xd1\xaa\x28\x9f\x08\x6b\x85\xd1\x4b\xc9\x77\xca\x41\xb4\xba\x32\x84\xcf\x95\x56\x2d\xdb\xbe\x0b\xad\xe6\x3a\xde\x81\xbd\x62\x44\xdf\x48\x83\x10\xce\x94\x5d\x3e\x7c\x85\x3d\xdf\xd8\xe4\x90\x1d\x8f\x67\xd5\x59\xc3\x61\xdd\xbb\x74\x92\x49\xeb\xc6\x5d\xa8\x08\xbc\x96\x23\x7a\x90\x65\x0f\xba\x27\x7f\x64\x85\xcf\x8b\x82\x6d\xe3\x46\x71\xf0\x2b\x20\x52\x27\x89\x47\x81\x51\x1a\x05\x61\x29\x70\x92\x6a\x72\xef\x76\xc0\xb9\x2e\x1d\x60\x21\xc1\x92\x59\xee\x0d\x0f\xef\xc8\x7d\xa8\x24\x4c\x6b\x01\xcf\x0f\xa3\x60\xe3\x77\xc3\x67\x9b\x12\x37\xac\xa9\x93\xd2\xd6\x19\xbe\xbc\xbf\xbb\x2b\x48\x5c\xde\xdf\x5d\x19\x8a\x49\x39\x89\x59\xd3\x59\xdb\x7b\x43\xcf\x7f\x21\x51\xf3\x9f\xb3\xe2\x82\x8c\x93\x1d\xd7\x46\x96\x84\x21\x37\x7b\xa0\xf5\x4c\xc6\x5d\xaf\x77\x2e\xa1\xf3\xd6\xd8\xa6\x32\xf9\x47\x4a\x70\xe7\xa5\xbc\xa7\xf5\x34\xf6\x49\xed\xe5\xed\x14\x2e\x85\x20\x6b\xa3\x5e\x2f\x05\xad\xe8\xa7\xb0\xf2\x13\x35\x57\xba\xde\xd3\x7a\xab\x1d\xbb\xda\x77\xae\xbe\x96\x18\x51\x7b\x93\xef\xf3\xd2\x52\x95\x9c\xb3\xef\xa5\x4a\x9a\xd7\x7e\xd4\x3a\x54\x03\xe8\x5c\xa3\xc3\x2b\x52\x9d\x22\xe2\x58\x70\x0c\x25\xed\x83\x7a\xb8\x6f\xee\x53\x29\x52\xa8\x04\xc0\x8b\xd2\xbe\x24\xb4\xee\xe5\xeb\x73\x20\x27\x2e\x7e\xdf\x8f\x0a\x2e\x51\x66\x38\x97\x99\x74\xeb\xd9\x17\xad\x76\x8f\xe1\x46\x35\x1a\x83\xed\x0b\x2c\x92\x8e\xf2\xee\xfc\xfd\x79\xcc\x3e\xc3\x9b\xa6\x80\x37\xa5\xb1\x89\xf9\x39\x6c\x3e\xbf\x11\xfe\xf3\x8a\xf8\x73\xbc\xbb\xbb\x61\xd4\x2b\x3d\x8c\x13\x04\xa0\x0e\xc1\x75\xaa\xac\x43\x25\xe8\x9d\xd1\x65\x71\x0a\xb4\x61\xfe\xf1\xc0\x6e\x2c\x00\x9e\x0d\x2f\xf2\x3f\x5e\x64\x68\x12\xda\x0b\x6c\x2e\xd5\xec\x53\x89\xca\x71\x8d\x39\xa0\x54\x2a\x47\x49\x2b\x7a\x03\x44\x55\x90\x0e\xc3\x7f\x78\x33\x60\xd2\x8d\x54\x32\x2f\x73\x50\x65\x3e\x27\xc3\x17\xb5\x0c\x46\x5a\x78\x11\xd3\x02\xcb\xcc\xf9\x63\xf5\x85\x8c\x1e\x32\x11\x3f\x7f\x53\x13\xf1\xf3\x38\x13\x87\x09\xb4\x05\x22\x61\x2e\x58\xf0\xc1\x9b\xb3\x15\x0f\x0c\x57\xfb\x3d\xca\x0e\x22\xd9\xad\x09\x0d\x82\xd2\x50\x3c\xed\x9c\xab\xa3\x99\xb6\x2c\xc4\x29\xa1\xfd\xc3\xed\x15\xc8\xf8\x1c\xe6\x19\xaa\x07\x1f\x14\xf9\xef\xcf\x91\x0f\x8d\x04\x5a\x55\x91\x72\xad\xcb\x9f\xa3\x73\x58\xc8\x2c\xa3\x18\xe4\x82\xbf\x00\x34\x04\x7f\xf9\xe7\x4f\x2c\x63\xf0\x1e\x28\x0d\x47\x1b\xef\xc3\xb1\x66\xde\x05\x29\x15\x12\xfd\x9a\x24\xe6\x33\xa3\x33\x9a\xa1\x19\x17\x50\xd9\x17\xd3\xcb\x1b\x60\x21\x7e\xc7\xcd\xf6\xc2\x0b\x34\xea\x30\xd6\xfc\x55\x1b\x58\xa5\xa4\xc0\x6a\x2e\x1d\x53\xa9\x12\xeb\xfd\x84\x99\x21\x8c\xd7\xd5\x95\x43\x71\x9b\x28\x9d\xa4\xa4\x27\x89\x3a\x81\x20\x89\x74\xb3\xdd\x9c\xf0\x38\xcf\x38\x4c\x40\x2b\xef\x93\x44\x3a\x30\x54\x68\x2b\x9d\x36\xeb\x7e\x34\x58\xa5\xd0\x79\x2e\xdd\x68\x8d\x29\xda\x74\xd3\xe5\x61\x95\x41\xdc\xa0\x3a\x67\x88\x66\xd6\xa1\x1b\x17\x76\xef\x53\x72\x29\x1f\x66\x03\x4a\x3b\xaf\x95\x25\xc2\x0a\x2d\x88\x8c\x50\x55\xa8\xce\x4b\x99\x0d\x18\xc1\x43\xf1\x2c\x1e\x6b\xc0\xb5\x3f\x6d\x0b\xaf\x21\x1e\xd8\xa6\x3e\x09\xc7\xc0\x2a\x56\x92\xf8\x14\x28\xe6\x80\x28\x74\x5e\xc8\x8c\xfa\x35\x86\x41\x33\x4a\xdf\x55\x58\xec\x55\xf5\xcb\x2f\x32\x74\xcc\xf1\x51\xf2\x6f\xc3\x62\x90\xae\x82\xa9\xd2\x57\x65\xa8\x13\x30\xa5\x52\x9c\xda\x55\xfd\xe0\xa0\xbb\xb7\x70\x0a\xb5\x74\x75\xd6\xaf\xc9\xa1\xcc\x38\x2a\x9f\x72\xe6\x46\x46\xba\xe9\x75\xa7\xb1\xd9\xef\xb6\xd0\x80\x38\x5e\x7e\x4f\xeb\x74\x20\x70\xfb\x06\xf7\xc8\x93\x54\x77\xd2\xea\x3e\xf9\x93\x1a\xeb\xb6\xf9\xc9\x5a\x1b\x1d\x78\x4f\x70\xdf\x80\xe7\x8f\xfd\x46\x3c\xcd\x89\x5f\xd9\xf0\x5d\xd8\xb0\x0f\x88\x9e\x4c\xea\x14\x44\x62\x74\x38\x13\xdd\x02\x0e\x86\x9b\x07\x4f\xd7\x81\xc3\x57\xd9\xe5\xfd\xdd\x6e\x21\xd2\xf5\xb1\xe8\xad\xf7\x8f\xb7\xa8\xd9\x37\x18\x88\xcb\xed\x5a\xd8\x5f\x38\x4f\x73\xc0\x90\xd5\xa5\x11\xbb\x35\xe3\x51\xd6\xf5\xa4\xbe\xfd\x46\x72\x5a\x59\x95\x9c\xfd\xe9\x5e\x48\xb8\xab\xc4\xf2\x2b\xd4\xb1\x47\xed\xa2\x5d\x25\x36\x04\x0d\xd4\xbc\x9d\x52\x62\x04\xe5\x6f\x6c\x72\x0a\xdd\xbf\x66\x88\x08\x6f\x6d\xdb\x87\x83\xc1\xbb\x9d\x27\xc4\x87\x9e\xaf\x9e\x3d\xdf\x06\x01\xfe\xac\x0f\x9f\xae\x8d\x1e\xb0\x05\x09\xb9\x08\x0f\xc1\x23\x7c\xdc\xd2\xf7\xdf\x70\x76\x33\x56\x6e\x77\xf5\x12\x44\x69\x0c\x29\x97\xad\xb9\x9c\xb0\x3c\x01\x57\x96\x13\xd5\x1c\x71\xe0\x78\x3c\xfc\xc9\x9e\x9c\xf2\x2f\xeb\x74\xf1\x7d\x39\x27\xa3\xc8\xd1\x80\x3a\x5c\x1d\x18\x15\xf6\x04\xf3\xfd\xe1\x73\x08\xdb\x86\x11\xa9\x4c\xd2\x59\xb3\xaf\x34\xb4\xf3\xb9\xd6\x9c\xd0\x0f\xb5\x19\x7a\x87\xf7\xd5\x09\x9b\x73\x21\x2d\xfc\x70\x39\x70\x45\x93\x5b\x69\xf3\x30\x5b\xe0\xdc\x48\x31\x1a\x92\x6a\x79\x38\x80\x9d\xac\xfa\x50\x96\x57\x5d\xef\x13\xe8\xad\x1f\xbe\xb7\x63\x39\xb9\x6f\x84\x1b\x98\x87\x93\x60\xe8\x53\x49\x76\xa0\x1c\xdb\xfd\x8d\xc7\xd3\xbc\x6c\x64\x7b\xc3\x20\xc4\xbe\x40\xe8\xa6\x31\x1b\x63\x60\xf3\xc4\x71\x18\x34\x3d\x6f\xe1\xcf\x0f\x9a\x2b\x5d\xb6\x33\x04\xa6\x5f\x78\x12\x1f\x8a\xfe\x27\xa4\x8c\x77\xad\x34\x71\x17\xe4\x3d\xee\xec\x7b\x80\x7b\x7e\xfe\x9c\xda\x76\xdc\xa8\xfa\x2a\x76\x6d\x99\x78\xfb\xc8\xfc\xcd\xf2\x9c\x5d\xfe\x3f\x9d\xd4\xfc\xd8\x7d\xb4\x3d\x12\xa1\xff\x3b\x74\x46\x84\x9a\x46\xb3\xe1\x50\xef\xb5\x1e\x2f\x9f\xa1\xf7\x16\xb0\x7d\x14\xf6\x81\xfb\xa7\xf7\xfd\x4e\x0b\xe9\xc5\x4c\xf6\x36\x39\xf7\x38\xf0\xe9\x5e\xe9\xfe\xf6\x57\x73\xe6\xae\xd3\x77\x3b\xba\x5e\x8b\xef\x29\x6d\x32\xa2\x56\x48\xaa\x5f\x77\xe9\xb3\x23\xa3\x30\xbb\xd6\xa2\xf1\xbc\xdb\x79\xc4\xbe\xd1\x86\xc2\x93\xfa\x61\x3f\xf9\x3c\xe2\x57\x9a\x6c\xc9\xd9\xe3\xd9\x7f\x02\x00\x00\xff\xff\x14\x4a\x4f\xe5\x7b\x2a\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 10875, mode: os.FileMode(420), modTime: time.Unix(1535763852, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
