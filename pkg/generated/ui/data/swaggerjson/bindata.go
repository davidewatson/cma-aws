// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x62\xa0\x3b\xe0\x7a\x40\x12\xb7\x3d\x1c\x70\xc8\x5f\xe7\x4d\xb2\x5d\xa3\xcd\x03\x71\xdb\x60\x71\x2d\x8c\x31\x35\x96\xb9\x91\x48\x95\xa4\xec\xba\x87\x7c\xf7\x03\x29\x2a\x96\x64\xc9\x0f\xb9\xdb\xf5\x2d\xb2\xc0\xa2\xb2\x44\xce\x9b\x3f\xce\x0c\x99\xff\x1e\x01\x04\x7a\x8e\x51\x44\x2a\x38\x83\xe0\xf5\xe9\xcb\xe0\xd8\xbe\xe3\x62\x22\x83\x33\xb0\xdf\x01\x02\xc3\x4d\x4c\xf6\xfb\x79\x9c\x69\x43\x0a\xae\x50\x60\x44\x0a\xfa\xf7\x43\xf8\x85\xe2\xd4\x3e\xde\x0e\xdc\x54\x80\x60\x46\x4a\x73\x29\xec\x84\xd9\xcb\xd3\x57\x9e\x26\x40\xc0\xa4\x30\xc8\xcc\x13\x61\x80\x40\x60\xe2\x28\x5f\x71\x36\x45\x8a\xe1\x23\x09\xfa\xc6\xd1\xcf\x00\x08\x32\x15\xdb\xef\x53\x63\x52\x7d\xd6\xeb\x45\xdc\xc4\x38\x3e\x65\x32\xe9\x25\xb3\x7c\x6c\x8f\x25\x78\x82\x73\xbd\x9c\x43\x09\x72\x37\xab\x18\xf2\xef\xc8\xbe\xb1\xb3\x02\x37\xe6\xf1\x08\xe0\xd1\x29\xaa\xd9\x94\x12\xd2\xc1\x19\xfc\x27\x97\xd1\x31\x2a\x04\xb6\x3f\xec\x8c\xcf\x6e\x2c\x93\x42\x67\x95\xc1\x98\xa6\x31\x67\x68\xb8\x14\xbd\xdf\xb4\x14\xcb\xb1\xa9\x92\x61\xc6\xb6\x1c\x8b\x66\xaa\x97\xd6\xee\x61\xca\x7b\xb3\x57\x3d\x96\x1b\xbb\x6c\xad\x88\xca\xc6\xb3\xe2\x67\x49\x82\x6a\x61\x75\xbd\xe7\x71\x0c\x8a\x8c\xe2\x34\x23\x30\x53\x02\x6d\xd0\x64\x1a\xe4\x04\x10\x3c\x31\x40\x11\x02\x37\x1a\x1e\xb2\x31\x31\x29\x26\x3c\x82\x89\x54\xc0\xa4\x10\xc4\x0c\x9f\x71\xb3\x78\xb2\x23\x40\x20\x53\x52\x4e\xe4\x41\x68\x79\xbc\x21\xe3\x43\xa0\x3c\x48\x91\x4e\xa5\xd0\xa4\x2b\xb2\x01\x04\xaf\x5f\xbe\xac\xbd\x02\x08\x42\xd2\x4c\xf1\xd4\xf8\x08\x29\x11\xca\x35\xb2\x0e\xc1\x95\x69\x00\xc1\x5f\x15\x4d\xec\x8c\xbf\xf4\x42\x9a\x70\xc1\x2d\x05\x6d\x9d\x8f\x73\xbd\x14\xec\x8e\xd2\x78\x11\x54\xe6\x3e\x1e\x35\x3d\x3f\x96\x34\x48\x51\x61\x42\x86\xd4\xd2\x5f\xf9\x7f\x35\xd9\x8b\x68\x75\xff\x1e\xaf\xd5\xeb\x1a\x13\xb2\xa6\xb7\x8e\x28\x8c\x6f\x24\x8c\x09\x62\x29\x1f\x28\x84\x2c\x3d\xad\x93\xe0\x6e\xe6\x97\x8c\xd4\xa2\xfe\x49\xd1\x97\x8c\x2b\xb2\x5e\x98\x60\xac\xa9\xf6\xd9\x2c\x52\x27\x98\x36\x8a\x8b\xa8\xac\xfe\xe3\xf1\x66\x75\x98\xa2\x90\x84\xe1\x18\xeb\x53\x4d\x4c\x91\x19\x3d\xd0\x62\xc4\xc3\x0d\x3a\xbe\x9f\x12\x0c\xdd\xf8\xb7\xb4\x18\x84\x2e\x92\xfa\xb7\x03\xe8\x33\x46\x5a\x1f\xb2\x7a\xe8\x24\xb4\x5a\x6e\xad\x62\xae\xd4\x5b\x5a\x3c\xa9\x89\x87\xab\xa6\xa2\xc8\x2a\xb0\x59\xb7\x3b\x37\xf0\x0f\x51\xe9\xe9\xf9\x73\x69\x25\x1a\x8c\xea\x6b\xb0\xd8\x75\x96\x93\x3f\x1f\xd5\xac\x12\x84\x14\x93\xa1\xf5\xd8\x98\x8f\x59\x62\xe1\x1a\x9c\xbb\x70\x43\x0f\x13\xea\x2a\xb2\x1d\x0a\xda\xdd\x4f\xd1\x00\xd7\x65\xb4\xfb\x9b\x06\x3b\xd1\x82\x5e\x48\xda\x28\xb9\x38\xc8\x95\xf2\x8c\x77\xcf\x78\xf7\xff\x87\x77\x69\xb6\x21\x11\x4c\x95\x9c\x71\x9b\x85\x6f\x85\x77\xe7\x8a\xf0\x50\xf1\xae\x22\xdb\x0f\xc1\xbb\xb1\x0c\x57\xdc\x9e\x47\x44\xd3\x97\x52\x40\x18\x95\xd5\xe3\xe1\x3b\xe8\x7c\xa5\xa3\x6d\x34\xee\x1e\x55\x47\x25\x83\xd5\xab\x8f\x5e\xcc\xb5\xe9\x56\x82\x20\xd8\xb9\x36\x07\xf6\xb4\xf4\x56\x95\xc5\x3b\xcb\xf0\xb0\x42\xb0\x2a\xdc\x0f\x89\xc1\xe7\x2d\x6a\x0b\x15\x9f\xb7\xa8\xc3\xdb\xa2\x1a\xc1\x64\xd9\x11\xda\x09\x47\x32\x25\xc0\x4f\x05\x2e\x26\x52\x25\x0e\x31\x00\xc7\x32\x33\x80\x29\x07\x4d\x6a\xb6\x76\x67\x7b\x43\xe6\x63\x4e\x61\xb0\x24\x70\x78\xf0\xe2\x65\xec\x04\x2d\x5d\xfc\xf3\xd4\xff\x2a\x49\xb3\xec\x40\x55\xb6\x9f\xfe\xfd\x70\x98\x12\xeb\xdf\x0f\x2f\xd0\xe0\x39\x89\x5a\x4f\xaa\x08\x27\x39\xfe\x8d\xd8\x12\xb9\x83\x54\x59\x57\x18\x5e\xb3\x6c\xe0\xd7\x41\xcd\xda\xb5\xa0\x3c\xae\x7c\x2b\xda\x8f\xf7\x53\xce\xa6\x90\x13\x80\x17\x99\x3e\x21\xd4\xe6\xe4\xd5\x31\x90\x61\xa7\x7f\x0f\x1a\xad\x83\x33\xe4\x31\x8e\x79\xcc\xcd\x62\xf4\x4d\x8a\x55\x47\x17\xac\x51\x29\xac\xae\xa5\x80\x1b\x4a\xea\xe3\xb7\x07\x85\xba\xe0\x65\x51\xc0\x89\x52\x52\x62\x7c\x0c\xc5\xf3\x6b\xe6\x9e\xe7\x64\x9f\xc3\x55\xed\x56\xb2\xc1\x1a\x1f\xeb\x27\xf0\x8e\xaa\x2c\xc7\x16\xbf\x0e\x84\x36\x28\x18\xbd\x51\x32\x4b\xf7\x71\xad\x1f\xbf\xbb\x63\x0b\x09\xc0\x8e\x86\x17\xc9\x3f\x4f\x63\x54\x11\xad\x75\x6c\xc2\xc5\xe8\x4b\x86\xc2\x70\xb3\x68\x63\xca\x85\xa1\xa8\x82\x0f\x00\x41\x0e\x03\xfe\xf3\x3f\x5e\xb7\x88\x74\xc5\x05\x4f\xb2\x04\x44\x96\x8c\x49\xd9\x2c\x86\x7b\x21\x35\xbc\x08\x69\x82\x59\x6c\xb4\x2d\x6e\xbf\x91\x92\x6d\x22\xe2\xd7\xdf\x55\x44\xfc\xda\x4d\xc4\xf6\x00\x7a\x72\x44\x64\x63\x41\x83\x83\x07\x9b\xca\x39\xc7\xa0\x08\x9b\x98\x6d\x15\x64\xb7\xca\xf7\x9b\x33\x45\xe1\xa0\xb6\xae\x76\x8e\xb4\x59\xca\x6c\x2e\xd4\x25\xd6\xec\x16\xfb\xf1\xf6\x1c\x78\x78\x0c\xe3\x18\xc5\x83\xdb\x69\xed\xff\x9f\xec\x7e\x8d\x86\x40\x0a\x72\x2f\x16\x32\xfb\x14\x1c\xc3\x84\xc7\x31\x85\xc0\x27\xf6\x05\xa0\x22\xf8\xe9\xd7\x1b\x4b\xa3\xd9\xeb\x9a\x58\xa6\x2c\xda\x38\x1b\x76\x15\x73\xe8\xa9\xe4\x9e\x68\xe6\xc4\x31\x19\x29\x19\xd3\x08\x55\x37\x40\xb5\xb6\x18\xf4\xaf\xc0\x12\x71\x1a\x97\xbb\xd5\x2f\x50\x89\xed\xa2\xe6\x67\xa9\x60\x3e\x25\x01\x5a\x26\x04\x66\xca\x45\xa4\x9d\x9d\x30\x56\x84\xe1\x02\x72\xbb\x86\xd5\x40\xa9\x6d\x7b\x0d\xdb\xf4\x1e\x01\x12\x71\x33\x5a\xcd\x3a\x76\xb3\x8c\xc1\x08\xa4\x70\x36\x89\xb8\x01\x45\xa9\xd4\xdc\x48\xb5\x68\xf6\x86\x65\xc9\x64\x92\x70\xd3\x99\xe3\x14\xf5\xb4\x38\x34\xb0\x2c\x3d\xb9\x56\x76\x46\x11\x8d\xb4\x41\xd3\x0d\x76\xef\xa7\x64\xa6\x76\x31\x2b\x10\xd2\x38\xae\x96\x22\xcc\x51\x03\x8b\x09\x45\xee\xd5\x71\xc6\xe3\x16\x21\xec\xa7\x70\x14\x76\x15\xe0\xc2\xad\xb6\x89\xe3\x10\xb6\xa8\x29\xf7\xf2\xa3\x8f\x2a\xcb\x24\x92\x90\x69\x0a\x2d\x20\x32\x99\xa4\x3c\xa6\x66\x8e\xfe\xa3\xea\xc4\xef\xdc\x4f\x76\xac\x9a\xe9\xa7\x31\x1a\x1b\xe3\x9d\xe8\xdf\xfa\xc9\xc0\x4d\xee\xa6\x9c\x5f\x5e\xe8\xf5\x40\x65\x42\x70\x61\xc3\xb6\x61\xe1\x56\x56\x5f\x9e\x7a\xf6\xef\x87\xe7\xcb\x1a\x65\x9f\x05\x57\x2d\x52\xbb\x2e\x80\xf6\xd2\xb5\x15\x6b\x6b\xb5\xe3\x7e\x9c\xdb\x2a\xca\x66\xee\x7b\xa4\xb2\xad\x85\xde\x56\x80\x6b\x67\x97\x6a\x4b\x1b\xd2\x99\xce\x11\xdc\x41\xad\x0d\x81\x12\x94\x07\x0d\x9e\xf7\x1b\xf4\x05\x19\xe4\xb1\xdd\x8f\xf7\x71\x7e\x47\x8f\x0f\x2e\x6a\x27\xa4\xcd\x66\xf6\xd5\xf4\xee\xf4\x1b\xce\x60\x5b\xc2\xc8\x9d\x94\x8f\x12\xd2\x1a\xa3\x6e\xbc\xfa\x61\xe8\xca\x28\x8c\x1b\x4a\xd5\xea\x69\xfc\x46\x71\x96\x87\xf3\x1d\x61\x7d\x79\x18\x53\x3a\xe7\x77\xb8\xe7\x8e\xf9\xed\xe3\x96\x36\xa9\x0b\xb0\xb6\x6b\x99\x93\x1b\xe6\x13\xdb\xe3\x7e\x93\x25\xd6\xe0\x95\x67\xf1\x1c\xaf\x07\x15\xaf\x87\x1c\x2a\xc3\xba\x6c\x6d\xe6\x09\x48\x64\x49\xa5\x8f\x12\x0c\xdf\xf7\xdf\x7f\x18\x8e\x3e\x5c\x0f\x6f\x2f\xcf\x07\x3f\x0f\x2e\x2f\xca\x9d\xa3\xdb\xbb\x9b\x8f\x83\xe1\xe0\xe6\x7a\x70\xfd\xa6\xfc\xfe\xee\xc3\xf5\xca\xab\xcb\xf3\x9b\xeb\xf3\xc1\xbb\xda\xeb\xe1\xfb\x9b\xdb\xdb\xda\xbb\xcb\xbb\xbb\x9b\xbb\xf2\x8b\x8b\xcb\x37\x77\xfd\x8b\xcb\x8b\x42\xeb\xa7\xd6\x5c\xe0\x4b\x3c\x57\x2d\xb4\x4b\xba\x34\xe8\x09\xac\x0e\x3b\x83\x6b\x69\x40\x93\xf9\x24\xe0\x04\xca\x2a\x9d\x81\x75\x40\xf9\x8d\xf3\x06\x01\x17\x21\x67\x68\xa8\x72\xda\x6b\xf1\x66\x4c\x76\xdf\xf1\xb9\xfe\xa9\x23\xe8\x6d\x91\xd3\xf2\x3f\xd6\x92\x99\xa2\xa5\x43\xa2\x20\x93\x5f\x58\xd2\x30\xc9\xe2\x78\x01\x99\xc6\x71\x4c\x9e\xf4\xd2\xa6\x9e\xfc\xf2\x45\x03\x0b\x34\x79\x75\x32\x97\xea\xc1\x12\x44\x66\xf8\x8c\xe2\x85\x97\x3a\xb4\x35\x9f\x4f\xf6\xbd\x2c\xc7\xa0\x33\x36\x05\xd4\x90\xa5\x91\xc2\xb0\xd8\x54\x13\x74\x92\xba\xa4\x39\x24\xd0\x72\x62\xe6\xa8\xbc\x54\x85\x4b\x73\x91\x8a\x5f\xdb\x59\x2e\xbf\xa0\x10\x3a\x3a\x2e\x0c\x72\x22\xee\x71\x2d\x85\x04\xad\x1a\x90\x89\xdc\x3e\x8e\x40\x11\x36\x39\x8d\xe2\xd7\x5a\x32\xbe\x6f\xac\x6d\x2e\xa1\x9c\x81\xac\x41\x24\x28\xd2\x46\x2a\x72\x3e\x80\x49\x26\x58\x8e\x1b\xdc\x2c\x1a\x13\x8b\x86\xfa\x7f\x1f\xac\x0e\xd1\xe0\x88\xd5\xdb\x8e\x6b\x10\x66\x73\xf7\xb2\x1d\x6f\xfa\xf7\xc3\xd5\xf6\x59\x1d\xee\x58\x63\xc6\xbc\x11\xf3\x6a\xb9\x76\x4b\xfd\x50\xcd\xea\x5c\x61\xb4\x19\x80\x15\x69\x99\x29\xb6\xda\xdb\xdc\xc9\x42\x0d\x2d\x9a\x66\x21\x7f\xfa\xf5\x06\xf2\xd6\x68\xa3\x34\x45\x63\x28\x6f\x80\x7c\x87\x7e\xeb\x4e\x5a\x54\xbb\x99\x25\x42\x2d\xbd\xd9\x5a\xcb\x6b\xcb\xcd\xa5\x7e\x40\xbb\x47\x80\x7f\xcf\x74\xc1\x5f\x31\x7c\x3a\xfd\x6f\xad\x41\xed\x80\x70\xdb\x15\xd5\xa0\xf3\xad\x27\xe0\x56\x77\xfb\x7a\x2a\xf8\x80\x4e\x89\xf1\x89\xbf\xff\xda\xc1\xc6\x15\x7e\x7f\x84\xb1\xcb\x49\xf5\x93\x56\x27\xc0\x32\xa5\x48\x98\x78\x01\x66\xca\xb5\xdb\x58\xe6\xda\xee\x0d\x09\x62\xcb\xf2\x78\xf8\x97\xde\xbb\x35\x35\x5b\xb6\x35\xde\x66\x63\x52\x82\x0c\xb5\xb0\xc3\xf9\x6e\x99\x59\x13\x7c\xaf\x07\xcc\x36\xdf\x96\x84\x98\xf2\x68\x3a\x2a\x9f\x7f\xb4\x69\x3e\x96\x32\x26\x14\x6d\xed\xf0\xc6\xcf\xeb\xfa\x59\xa5\x4d\xf6\x97\x7e\x4b\xba\x4e\xc6\x26\x05\xa3\x09\x8e\x15\x67\x9d\x5d\x92\x4f\xf7\x0b\xb0\xd6\xfd\xd9\x36\xca\xf3\xf3\xbf\x3d\xc2\x5b\x3e\xfc\x68\xc3\xce\x51\x97\xe1\x06\xc6\x7e\x25\xd8\x64\x82\x74\x4b\xdb\x70\xf5\x6a\xfb\xe6\xb8\x2c\x55\x7e\xed\x4e\x08\x5d\x3b\xa3\x5e\x30\x14\xc2\x40\x71\xd8\xbb\x9d\x6b\x1a\x6e\x5a\x1e\x9e\x6b\xce\x65\x56\xcd\x10\x6c\xf8\xf9\x0b\x97\x6d\xe8\xdf\x5c\xaf\x6d\x77\x2c\x51\x29\xc8\x56\x9d\xbc\xc6\x9c\x4d\xb7\x68\x0e\xcf\x9e\x83\x5a\x72\x9e\x97\x04\x7a\xa1\x6d\xe0\xad\x0b\xe6\xdf\x2d\xcf\x59\x8d\xff\xcd\x49\xcd\xbb\xfa\xcd\xab\x1d\x3d\xf4\xa7\xf3\x4e\x07\xa8\x29\xb5\x46\xb7\xb5\x5e\xe5\x1a\xc7\x01\x5a\x6f\x02\x4f\xd7\x63\x1c\x70\xdf\xbc\x6d\x36\x9a\x4f\x2f\x46\xbc\xf1\x30\x6e\x8d\x01\x37\x9f\xe9\xad\x3f\xa6\x29\x8f\x5c\x35\xfa\x6a\x4b\xc3\x71\x71\x7d\xef\x22\x23\xaa\x40\xd2\xf2\x9e\x0b\x7d\x35\xa4\x04\xc6\x17\x92\x95\x2e\xba\xd4\xae\xf3\x5c\xd9\x2a\x37\xef\x80\x6d\xf7\x97\x6e\x3b\xfc\x71\x9a\x95\xe4\xe8\xf1\xe8\x7f\x01\x00\x00\xff\xff\xd5\x27\x8c\x31\x72\x37\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 14194, mode: os.FileMode(420), modTime: time.Unix(1539059974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
