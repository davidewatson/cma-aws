// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7b\x6f\xdb\xc8\x11\xff\xdf\x9f\x62\xc0\x16\x68\x0a\x38\x56\x92\xa2\x40\x91\xbf\xaa\xda\x68\x4e\xc8\xb9\x67\x9c\x8a\x08\x45\x2f\x10\x46\xcb\x11\xb5\x67\x72\x97\xd9\x5d\x4a\x51\x0a\x7f\xf7\x62\x96\x94\xf8\x10\xa9\x07\x95\x73\xd4\x22\x06\x0c\xd3\xdc\xdd\x79\xef\x6f\x67\x66\xf9\x9f\x2b\x80\xc0\xae\x30\x8a\xc8\x04\x6f\x21\x78\x73\xf3\x2a\xb8\xe6\x77\x52\xcd\x75\xf0\x16\x78\x1c\x20\x70\xd2\xc5\xc4\xe3\xb7\x71\x66\x1d\x19\xb8\x47\x85\x11\x19\x18\x4e\xc6\xf0\x03\xc5\x29\x3f\x3e\x8c\xfc\x52\x80\x60\x49\xc6\x4a\xad\x78\xc1\xf2\xd5\xcd\xeb\x82\x26\x40\x20\xb4\x72\x28\xdc\x96\x30\x40\xa0\x30\xf1\x94\xef\xa5\x58\x20\xc5\xf0\x81\x14\x7d\x91\x58\xac\x00\x08\x32\x13\xf3\xf8\xc2\xb9\xd4\xbe\x1d\x0c\x22\xe9\x62\x9c\xdd\x08\x9d\x0c\x92\x65\x3e\x77\x20\x12\x7c\x89\x2b\x5b\xae\xa1\x04\xa5\x5f\xb5\x99\xf2\xd7\x88\xdf\xf0\xaa\xc0\xcf\x79\xba\x02\x78\xf2\x8a\x5a\xb1\xa0\x84\x6c\xf0\x16\xfe\x9d\xcb\xe8\x19\x6d\x04\xe6\x7f\x78\xc5\x47\x3f\x57\x68\x65\xb3\xda\x64\x4c\xd3\x58\x0a\x74\x52\xab\xc1\xaf\x56\xab\x72\x6e\x6a\x74\x98\x89\x23\xe7\xa2\x5b\xd8\xd2\xda\x03\x4c\xe5\x60\xf9\x7a\x20\x72\x63\x57\xad\x15\x51\xd5\x78\x2c\x7e\x96\x24\x68\xd6\xac\xeb\x44\xc6\x31\x18\x72\x46\xd2\x92\xc0\x2d\x08\xac\x43\x97\x59\xd0\x73\x40\x28\x88\x01\xaa\x10\xa4\xb3\xf0\x98\xcd\x48\x68\x35\x97\x11\xcc\xb5\x01\xa1\x95\x22\xe1\xe4\x52\xba\xf5\xd6\x8e\x00\x81\x4e\xc9\x78\x91\x47\x21\xf3\x78\x47\xae\x08\x81\xea\x24\x43\x36\xd5\xca\x92\xad\xc9\x06\x10\xbc\x79\xf5\xaa\xf1\x0a\x20\x08\xc9\x0a\x23\x53\x57\x44\x48\x85\x50\xae\x11\x3b\x04\x77\x96\x01\x04\xbf\x37\x34\xe7\x15\xbf\x1b\x84\x34\x97\x4a\x32\x05\xcb\xce\xc7\x95\x2d\x05\xfb\x99\xd2\x78\x1d\xd4\xd6\x3e\x5d\xb5\x3d\x3f\x55\x34\x48\xd1\x60\x42\x8e\x4c\xe9\xaf\xfc\xa7\x21\xfb\x26\x5a\xfd\xdf\xeb\xbd\x7a\xfd\x03\x13\x62\xd3\xb3\x23\x36\xc6\x77\x1a\x66\x04\xb1\xd6\x8f\x14\x42\x96\xde\x34\x49\x48\xbf\xf2\x53\x46\x66\xdd\x1c\x32\xf4\x29\x93\x86\xd8\x0b\x73\x8c\x2d\x35\x86\xdd\x3a\xf5\x82\x59\x67\xa4\x8a\xaa\xea\x3f\x5d\x1f\x56\x47\x18\x0a\x49\x39\x89\xb1\xbd\xb1\x24\x0c\xb9\xe9\x23\xad\xa7\x32\x3c\xa0\xe3\x3f\x17\x04\x63\x3f\xff\x3d\xad\x47\xa1\x8f\xa4\xe1\xc3\x08\x86\x42\x90\xb5\x97\xac\x1e\x7a\x09\x59\xcb\xa3\x55\xcc\x95\x7a\x4f\xeb\xad\x9a\x78\xb9\x6a\x1a\x8a\x58\x81\xc3\xba\xfd\xec\x27\x7e\x13\x95\xb6\xcf\x1f\x2b\x3b\xd1\x61\xd4\xdc\x83\x9b\x53\xa7\x5c\xfc\xf1\xaa\x61\x95\x20\xa4\x98\x1c\xed\xc7\xc6\x7c\x4e\x89\x85\x7b\x70\xee\xce\x4f\xbd\x4c\xa8\xab\xc9\x76\x29\x68\x37\x59\xa0\x03\x69\xab\x68\xf7\x07\x0b\xbc\x90\x41\x2f\x24\xeb\x8c\x5e\x5f\xe4\x4e\xf9\x8e\x77\xdf\xf1\xee\x7f\x0f\xef\xd2\xec\x40\x22\x98\x1a\xbd\x94\x9c\x85\x1f\x85\x77\xb7\x86\xf0\x52\xf1\xae\x26\xdb\xb3\xe0\xdd\x4c\x87\x3b\x6e\xcf\x23\xa2\x6d\xa4\x12\x10\xce\x64\xcd\x78\xf8\x0a\x3a\xdf\xdb\xe8\x18\x8d\xfb\x47\xd5\x55\xc5\x60\xcd\xea\x63\x10\x4b\xeb\xfa\x95\x20\x08\xbc\x96\x73\xe0\x82\x96\x3d\xaa\xb2\xf8\x91\x19\x5e\x56\x08\xd6\x85\xeb\x15\x83\x5f\xc1\x23\x65\x59\x7d\x92\x33\x32\xa3\xa0\x58\x0a\x5c\xd6\x9b\xc4\x9b\x1d\x70\xa6\x33\x07\x98\x4a\xb0\x64\x96\x7b\xe1\xe1\x1d\xb9\x0f\x39\x85\x51\x49\xe0\xf2\x7c\x54\xc8\xf8\x6c\xfe\xd9\x36\x11\x2a\xd2\x94\x65\x7c\x6d\x0f\x0f\x27\xe3\x71\x4a\x62\x38\x19\xdf\xa1\xc3\x5b\x52\x8d\xc2\x7e\x73\x6c\xe8\xd9\xaf\x24\xca\xf0\x0f\x52\xc3\xae\x70\xb2\x61\xd9\xa0\x38\xef\x1a\xd6\x6e\x1c\x3e\xd7\xb5\xb1\x4d\x0f\x67\xb2\x90\x62\x01\x39\x01\x78\x91\xd9\x97\x84\xd6\xbd\x7c\x7d\x0d\xe4\xc4\xcd\x1f\x83\x56\xeb\xe0\x12\x65\x8c\x33\x19\x4b\xb7\x9e\x7e\xd1\x6a\xd7\xd1\x1b\xd6\x68\x0c\xd6\x21\x32\x90\x8e\x92\xe6\xfc\xe3\x0f\xff\xa6\xe0\x55\x51\xc0\x8b\x52\x51\x62\x76\x0d\x9b\xe7\x37\xc2\x3f\xaf\x88\x9f\xc3\x5d\xed\x76\x8e\xd4\x06\x1f\xf6\x13\x14\x8e\xaa\x6d\xc7\x0e\xbf\x8e\x94\x75\xa8\x04\xbd\x33\x3a\x4b\xcf\x71\x6d\x31\xff\x74\xc7\x6e\x24\x00\x9e\x0d\x2f\x92\x3f\xdf\xc4\x68\x22\xda\xeb\xd8\x44\xaa\xe9\xa7\x0c\x95\x93\x6e\xdd\xc5\x54\x2a\x47\x51\x0d\x1f\x00\x82\x1c\x06\x8a\xe1\x3f\xbd\xe9\x10\xe9\x5e\x2a\x99\x64\x09\xa8\x2c\x99\x91\xe1\xa3\x40\x16\x42\x5a\x78\x11\xd2\x1c\xb3\xd8\x59\xae\x10\xbe\x90\xd1\x5d\x22\xe2\xe7\xdf\x54\x44\xfc\xdc\x4f\xc4\xee\x00\xda\x3a\x22\xe2\x58\xb0\xe0\xe1\x81\xcf\x43\xef\x18\x54\x61\x1b\xb3\xa3\x82\xec\xc1\x14\x4d\xbb\xcc\x50\x38\x6a\xec\xab\x93\x23\x6d\x99\x0a\xae\x79\xfa\xc4\x1a\xa7\xd2\x1f\x1e\x6e\x41\x86\xd7\x30\x8b\x51\x3d\xfa\x8c\x9a\x7f\x7f\xe1\xbc\x1c\x1d\x81\x56\xe4\x5f\xac\x75\xf6\x4b\x70\x0d\x73\x19\xc7\x14\x82\x9c\xf3\x0b\x40\x43\xf0\xb7\x7f\xfd\xc4\x34\xda\xbd\x6e\x49\x64\x86\xd1\xc6\xdb\xb0\xaf\x98\xe3\x82\x4a\xee\x89\x76\x4e\x12\x93\xa9\xd1\x31\x4d\xd1\xf4\x03\x54\xb6\xc5\x68\x78\x0f\x4c\xc4\x6b\x5c\x6d\xf9\xbd\x40\xa3\x8e\x8b\x9a\xbf\x6b\x03\xab\x05\x29\xb0\x9a\xab\xe6\x85\x54\x91\xf5\x76\xc2\xd8\x10\x86\x6b\xc8\xed\x1a\xd6\x03\xa5\x71\xec\xb5\x1c\xd3\x67\x04\x48\x24\xdd\x74\x37\xeb\x38\xcd\x32\x0e\x23\xd0\xca\xdb\x24\x92\x0e\x0c\xa5\xda\x4a\xa7\xcd\xba\xdd\x1b\xcc\x52\xe8\x24\x91\xae\x37\xc7\x05\xda\xc5\xa6\xf3\xca\x2c\x0b\x72\x9d\xec\x9c\x21\x9a\x5a\x87\xae\x1f\xec\x4e\x16\xe4\x16\xbc\x99\x0d\x28\xed\x3c\x57\xa6\x08\x2b\xb4\x20\x62\x42\x95\x7b\x75\x96\xc9\xb8\x43\x08\x1e\x0a\xa7\x61\x5f\x01\xee\xfc\x6e\x9b\x7b\x0e\x61\x87\x9a\xfa\x2c\x3f\x16\x51\xc5\x4c\x22\x0d\x99\xa5\x90\x01\x51\xe8\x24\x95\x31\xb5\x73\x2c\x06\x4d\x2f\x7e\xb7\xc5\x62\xcf\xaa\x9d\x7e\x1a\xa3\xe3\x18\xef\x45\xff\xa1\x58\x0c\xd2\xe5\x6e\xca\xf9\xe5\x0d\x9d\x01\x98\x4c\x29\xa9\x38\x6c\x5b\x36\x6e\x6d\xf7\xe5\xa9\xe7\x70\x32\xbe\x2d\x7b\x11\xe7\x6c\xb8\x7a\x33\xaa\xef\x06\xe8\x6e\x51\x75\x62\x6d\xa3\x47\x74\x1e\xe7\xae\xce\x51\x3b\xf7\x33\x52\xd9\xce\x86\xce\x51\x80\xcb\xab\x2b\x3d\x24\x0e\xe9\xcc\xe6\x08\xee\xa1\x96\x43\xa0\x02\xe5\x41\x8b\xe7\x8b\x03\xfa\x8e\x1c\xca\x98\xcf\xe3\x73\x9c\xdf\xd3\xe3\xa3\xbb\xc6\x35\x53\xbb\x99\x8b\xe6\xc6\xe9\xf4\x5b\x2e\xb2\x3a\xc2\xc8\x5f\x37\xf6\xc4\xd0\xb2\x7d\x5c\xde\x5a\x1e\xe4\x58\x5e\x62\x9e\xcd\xb5\x72\x1f\xea\xa1\xcd\x5f\x87\xf2\x63\xbb\x10\x7b\xd0\xa0\x88\x89\xef\xd1\xf0\x2c\xd1\xb0\xcf\x11\x2d\x39\xf4\x39\x1e\x09\xd1\xe1\x54\x34\x4b\x77\xe8\x6e\x4c\x1c\xee\x00\x74\xc3\xda\x70\x32\xde\x2d\x41\x9b\x36\x16\xad\xa7\xce\x1e\x89\x5a\xcf\xab\x8e\x33\xb8\x8e\x8c\x3e\xb9\x38\xec\x75\x43\x56\x67\x46\xec\xf6\x07\x4e\xb2\x50\x4b\x99\xd3\x2e\x24\x97\x10\x79\x7b\xa1\x3d\xb5\x2f\x8a\xab\xbc\x88\xf8\x0a\x3d\x8b\x93\xb4\xa8\x77\x04\x2a\x84\x3a\xfa\x1b\x8d\xb2\xb1\x47\x90\xdf\xdb\xe8\x9c\x00\xff\x9a\xa0\x50\x7c\xeb\xb0\xbd\x86\xe8\xcc\xe3\x78\x42\x78\xec\x8e\x6a\xd1\xf9\xa1\x20\xe0\x77\x77\xf7\x7e\xda\xf0\x01\x9b\x92\x90\xf3\xe2\x43\x9c\x1e\x36\xae\xf1\xfb\x16\xc6\xae\xa2\xe3\x56\xab\x97\x20\x32\x63\x48\xb9\x78\xcd\xa5\xa3\xe5\x09\xb8\xb2\x5c\x94\x24\x88\x1d\xdb\xe3\xf1\x2f\xf6\xec\xf2\x6e\x59\x96\x06\xef\xb3\x19\x19\x45\x8e\x3a\xd8\xe1\xea\x24\x94\x6a\x85\xef\xfd\x80\xd9\xe5\xdb\x8a\x10\x0b\x19\x2d\xa6\xd5\x1e\x62\x97\xe6\x33\xad\xb9\x78\xeb\x6a\x29\xb5\x0e\xef\xab\x09\x37\xfb\x42\x5a\xf8\x61\xd8\x71\x28\x93\x5b\x69\xf3\x38\x9d\xe3\xcc\x48\xd1\xdb\x25\xf9\xf2\x62\x03\x36\x2a\xa8\x63\xa3\x3c\xef\xa1\x9f\x11\xde\xfa\xf1\xb9\x0d\xcb\x85\x5c\x05\x6e\x60\x56\xec\x04\x43\x9f\x32\xb2\x1d\xa5\xf7\xee\x37\x76\x87\xe3\xb2\x92\xdf\x75\x3b\x21\xf4\x25\x41\x33\x71\xd9\x08\x03\x9b\x0b\x93\xe3\x5c\xd3\xf2\xc9\xc7\xe5\xb9\xe6\x56\x67\xf5\x0c\x81\xc3\xaf\xf8\xf2\xa3\x0b\xfd\xcf\x48\x12\xc7\xb5\xc4\x70\xd7\xc9\x7b\xcc\xd9\x76\x9d\x77\x79\xf6\x1c\xd9\x3a\x6e\xe4\x3d\x34\xbb\xb6\x1c\x78\xfb\x82\xf9\x37\xcb\x73\x76\xe3\xff\x70\x52\xf3\x63\xf3\x0a\xf8\x44\x0f\xfd\xdf\x79\xa7\x07\xd4\x54\xda\x0b\xc7\x5a\xaf\x76\x15\x7a\x81\xd6\x9b\xc3\xf6\x8a\xd9\x03\xf7\x4f\xef\xdb\x8d\x56\xa4\x17\x53\xd9\xda\xd0\xde\x63\xc0\xc3\x7d\xf1\xfd\xad\xce\xea\xcc\x5d\xa3\xef\x36\x93\x3c\x17\xdf\x3b\xda\x64\x44\x35\x48\x2a\xef\x8a\xe9\xb3\x23\xa3\x30\xbe\xd3\xa2\x72\x59\xdc\xb8\x12\xbf\xd7\x86\x8a\x0b\xfa\xe3\x3e\xb9\x3f\xe1\x2b\x79\x96\xe4\xea\xe9\xea\xbf\x01\x00\x00\xff\xff\x24\x79\x50\xeb\xfb\x2f\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 12283, mode: os.FileMode(420), modTime: time.Unix(1536091623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
