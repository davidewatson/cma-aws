// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x7b\x8f\xdb\xb8\x11\xff\x7f\x3f\xc5\x40\x2d\xd0\x14\xd8\xac\x93\x14\x05\x8a\xfc\x55\x77\x17\xcd\x19\xb9\xed\x2d\xce\x45\x8c\xa2\x17\x18\x63\x6a\x2c\xf3\x56\x22\x15\x92\xb2\xe3\x14\xfb\xdd\x8b\xa1\x64\xeb\x61\xc9\x0f\x39\x97\xb8\xc5\x06\x08\xa2\x88\xe4\xbc\xf9\xe3\xcc\x50\xfe\xcf\x15\x40\x60\x57\x18\x45\x64\x82\xb7\x10\xbc\xb9\x79\x15\x5c\xf3\x3b\xa9\xe6\x3a\x78\x0b\x3c\x0e\x10\x38\xe9\x62\xe2\xf1\xdb\x38\xb3\x8e\x0c\xdc\xa3\xc2\x88\x0c\x0c\x27\x63\xf8\x81\xe2\x94\x1f\x1f\x46\x7e\x29\x40\xb0\x24\x63\xa5\x56\xbc\x60\xf9\xea\xe6\x75\x41\x13\x20\x10\x5a\x39\x14\x6e\x4b\x18\x20\x50\x98\x78\xca\xf7\x52\x2c\x90\x62\xf8\x40\x8a\xbe\x48\x2c\x56\x00\x04\x99\x89\x79\x7c\xe1\x5c\x6a\xdf\x0e\x06\x91\x74\x31\xce\x6e\x84\x4e\x06\xc9\x32\x9f\x3b\x10\x09\xbe\xc4\x95\x2d\xd7\x50\x82\xd2\xaf\xda\x4c\xf9\x6b\xc4\x6f\x78\x55\xe0\xe7\x3c\x5d\x01\x3c\x79\x45\xad\x58\x50\x42\x36\x78\x0b\xff\xce\x65\xf4\x8c\x36\x02\xf3\x7f\x78\xc5\x47\x3f\x57\x68\x65\xb3\xda\x64\x4c\xd3\x58\x0a\x74\x52\xab\xc1\xaf\x56\xab\x72\x6e\x6a\x74\x98\x89\x23\xe7\xa2\x5b\xd8\xd2\xda\x03\x4c\xe5\x60\xf9\x7a\x20\x72\x63\x57\xad\x15\x51\xd5\x78\x2c\x7e\x96\x24\x68\xd6\xac\xeb\x44\xc6\x31\x18\x72\x46\xd2\x92\xc0\x2d\x08\xac\x43\x97\x59\xd0\x73\x40\x28\x88\x01\xaa\x10\xa4\xb3\xf0\x98\xcd\x48\x68\x35\x97\x11\xcc\xb5\x01\xa1\x95\x22\xe1\xe4\x52\xba\xf5\xd6\x8e\x00\x81\x4e\xc9\x78\x91\x47\x21\xf3\x78\x47\xae\x08\x81\xea\x24\x43\x36\xd5\xca\x92\xad\xc9\x06\x10\xbc\x79\xf5\xaa\xf1\x0a\x20\x08\xc9\x0a\x23\x53\x57\x44\x48\x85\x50\xae\x11\x3b\x04\x77\x96\x01\x04\xbf\x37\x34\xe7\x15\xbf\x1b\x84\x34\x97\x4a\x32\x05\xcb\xce\xc7\x95\x2d\x05\xfb\x99\xd2\x78\x1d\xd4\xd6\x3e\x5d\xb5\x3d\x3f\x55\x34\x48\xd1\x60\x42\x8e\x4c\xe9\xaf\xfc\x4f\x43\xf6\x4d\xb4\xfa\x7f\xaf\xf7\xea\xf5\x0f\x4c\x88\x4d\xcf\x8e\xd8\x18\xdf\x69\x98\x11\xc4\x5a\x3f\x52\x08\x59\x7a\xd3\x24\x21\xfd\xca\x4f\x19\x99\x75\x73\xc8\xd0\xa7\x4c\x1a\x62\x2f\xcc\x31\xb6\xd4\x18\x76\xeb\xd4\x0b\x66\x9d\x91\x2a\xaa\xaa\xff\x74\x7d\x58\x1d\x61\x28\x24\xe5\x24\xc6\xf6\xc6\x92\x30\xe4\xa6\x8f\xb4\x9e\xca\xf0\x80\x8e\xff\x5c\x10\x8c\xfd\xfc\xf7\xb4\x1e\x85\x3e\x92\x86\x0f\x23\x18\x0a\x41\xd6\x5e\xb2\x7a\xe8\x25\x64\x2d\x8f\x56\x31\x57\xea\x3d\xad\xb7\x6a\xe2\xe5\xaa\x69\x28\x62\x05\x0e\xeb\xf6\xb3\x9f\xf8\x5d\x54\xda\x3e\x7f\xac\xec\x44\x87\x51\x73\x0f\x6e\x4e\x9d\x72\xf1\xc7\xab\x86\x55\x82\x90\x62\x72\xb4\x1f\x1b\xf3\x39\x25\x16\xee\xc1\xb9\x3b\x3f\xf5\x32\xa1\xae\x26\xdb\xa5\xa0\xdd\x64\x81\x0e\xa4\xad\xa2\xdd\x1f\x2c\xf0\x42\x06\xbd\x90\xac\x33\x7a\x7d\x91\x3b\xe5\x19\xef\x9e\xf1\xee\x7f\x0f\xef\xd2\xec\x40\x22\x98\x1a\xbd\x94\x9c\x85\x1f\x85\x77\xb7\x86\xf0\x52\xf1\xae\x26\xdb\x37\xc1\xbb\x99\x0e\x77\xdc\x9e\x47\x44\xdb\x48\x25\x20\x9c\xc9\x9a\xf1\xf0\x15\x74\xbe\xb7\xd1\x31\x1a\xf7\x8f\xaa\xab\x8a\xc1\x9a\xd5\xc7\x20\x96\xd6\xf5\x2b\x41\x10\x78\x2d\xe7\xc0\x05\x2d\x7b\x54\x65\xf1\x23\x33\xbc\xac\x10\xac\x0b\xf7\x4d\x62\xf0\xf9\x88\x3a\x42\xc5\xe7\x23\xea\xf2\x8e\xa8\x56\x30\x29\x3b\x42\x27\xe1\x48\x66\x14\x14\x4b\x41\xaa\xb9\x36\x89\x47\x0c\xc0\x99\xce\x1c\x60\x2a\xc1\x92\x59\xee\x3d\xd9\xde\x91\xfb\x90\x53\x18\x95\x04\x2e\x0f\x5e\x0a\x19\x7b\x41\x4b\x1f\xff\x6c\xfb\x5f\x15\x69\xca\x0e\x54\xed\xf8\x19\x4e\xc6\xe3\x94\xc4\x70\x32\xbe\x43\x87\xb7\xa4\x1a\x3d\xa9\x4d\x38\xe9\xd9\xaf\x24\x4a\xe4\x0e\x52\xc3\xae\x70\xb2\x61\xd9\xa0\xd8\x07\x0d\x6b\x37\x82\xf2\xba\x36\xb6\x69\x3f\x4e\x16\x52\x2c\x20\x27\x00\x2f\x32\xfb\x92\xd0\xba\x97\xaf\xaf\x81\x9c\xb8\xf9\x63\xd0\x6a\x1d\x5c\xa2\x8c\x71\x26\x63\xe9\xd6\xd3\x2f\x5a\xed\x3a\x7a\xc3\x1a\x8d\xc1\xfa\x5e\x0a\xa4\xa3\xa4\x39\xff\x78\x50\x68\x0a\x5e\x15\x05\xbc\x28\x15\x25\x66\xd7\xb0\x79\x7e\x23\xfc\xf3\x8a\xf8\x39\xdc\xd5\x6e\x27\x1b\x6c\xf0\x61\x3f\x41\xe1\xa8\xda\x76\xec\xf0\xeb\x48\x59\x87\x4a\xd0\x3b\xa3\xb3\xf4\x1c\xd7\x16\xf3\x4f\x77\xec\x46\x02\xe0\xd9\xf0\x22\xf9\xf3\x4d\x8c\x26\xa2\xbd\x8e\x4d\xa4\x9a\x7e\xca\x50\x39\xe9\xd6\x5d\x4c\xa5\x72\x14\xd5\xf0\x01\x20\xc8\x61\xa0\x18\xfe\xd3\x9b\x0e\x91\xee\xa5\x92\x49\x96\x80\xca\x92\x19\x19\xce\x62\x64\x21\xa4\x85\x17\x21\xcd\x31\x8b\x9d\xe5\xe2\xf6\x0b\x19\xdd\x25\x22\x7e\xfe\x4d\x45\xc4\xcf\xfd\x44\xec\x0e\xa0\xad\x23\x22\x8e\x05\x0b\x1e\x1e\x38\x95\xf3\x8e\x41\x15\xb6\x31\x3b\x2a\xc8\x1e\x4c\xd1\x6f\xce\x0c\x85\xa3\xc6\xbe\x3a\x39\xd2\x96\xa9\xe0\x5c\xa8\x4f\xac\xf1\x11\xfb\xe1\xe1\x16\x64\x78\x0d\xb3\x18\xd5\xa3\x3f\x69\xf9\xef\x2f\x7c\x5e\xa3\x23\xd0\x8a\xfc\x8b\xb5\xce\x7e\x09\xae\x61\x2e\xe3\x98\x42\x90\x73\x7e\x01\x68\x08\xfe\xf6\xaf\x9f\x98\x46\xbb\xd7\x2d\x89\xcc\x30\xda\x78\x1b\xf6\x15\x73\x5c\x50\xc9\x3d\xd1\xce\x49\x62\x32\x35\x3a\xa6\x29\x9a\x7e\x80\xca\xb6\x18\x0d\xef\x81\x89\x78\x8d\xab\xdd\xea\x17\x68\xd4\x71\x51\xf3\x77\x6d\x60\xb5\x20\x05\x56\x27\x04\x6e\x21\x55\x64\xbd\x9d\x30\x36\x84\xe1\x1a\x72\xbb\x86\xf5\x40\x69\x1c\x7b\x2d\xc7\xf4\x19\x01\x12\x49\x37\xdd\xcd\x3a\x4e\xb3\x8c\xc3\x08\xb4\xf2\x36\x89\xa4\x03\x43\xa9\xb6\xd2\x69\xb3\x6e\xf7\x06\xb3\x14\x3a\x49\xa4\xeb\xcd\x71\x81\x76\xb1\xb9\x34\x60\x96\x05\xb9\x4e\x76\xce\x10\x4d\xad\x43\xd7\x0f\x76\x27\x0b\x72\x0b\xde\xcc\x06\x94\x76\x9e\x2b\x53\x84\x15\x5a\x10\x31\xa1\xca\xbd\x3a\xcb\x64\xdc\x21\x04\x0f\x85\xd3\xb0\xaf\x00\x77\x7e\xb7\xcd\x3d\x87\xb0\x43\x4d\x7d\x96\x1f\x8b\xa8\x62\x26\x91\x86\xcc\x52\xc8\x80\x28\x74\x92\xca\x98\xda\x39\x16\x83\xa6\x17\xbf\xdb\x62\xb1\x67\xd5\x4e\x3f\x8d\xd1\x71\x8c\xf7\xa2\xff\x50\x2c\x06\xe9\x72\x37\xe5\xfc\xf2\x42\x6f\x00\x26\x53\x4a\x2a\x0e\xdb\x96\x8d\x5b\xdb\x7d\x79\xea\x39\x9c\x8c\x6f\xcb\x1a\xe5\x9c\x0d\x57\x2f\x52\xfb\x6e\x80\xee\xd2\xb5\x13\x6b\x1b\xb5\xe3\x79\x9c\xbb\x2a\xca\x76\xee\x67\xa4\xb2\x9d\x85\xde\x51\x80\xcb\xab\x2b\xb5\x25\x87\x74\x66\x73\x04\xf7\x50\xcb\x21\x50\x81\xf2\xa0\xc5\xf3\xc5\x01\x7d\x47\x0e\x65\xcc\xe7\xf1\x39\xce\xef\xe9\xf1\xd1\x5d\xe3\x86\xb4\xdd\xcc\x45\x35\x7d\x3a\xfd\x96\x3b\xd8\x8e\x30\xf2\x37\xe5\x3d\x31\xb4\xbc\xf9\x28\x2f\xdc\x0f\x72\x2c\xef\xdf\xcf\xe6\x5a\xb9\xca\xf7\xd0\xe6\x6f\xf2\xf9\xb1\x5d\x88\x3d\x68\x50\xc4\xc4\x73\x34\x7c\x93\x68\xd8\xe7\x88\x96\x1c\xfa\x1c\x8f\x84\xe8\x70\x2a\x9a\xa5\x3b\x74\x37\x26\x0e\x77\x00\xba\x61\x6d\x38\x19\xef\x96\xa0\x4d\x1b\x8b\xd6\x53\x67\x8f\x44\xad\xe7\x55\xc7\x19\x5c\x47\x46\x9f\x5c\x1c\xf6\xba\x21\xab\x33\x23\x76\xfb\x03\x27\x59\xa8\xa5\xcc\x69\x17\x92\x4b\x88\xbc\xbd\xd0\x9e\xda\x17\xc5\x55\x5e\x44\x7c\x85\x9e\xc5\x49\x5a\xd4\x3b\x02\x15\x42\x1d\xfd\x8d\x46\xd9\xd8\x23\xc8\xef\x6d\x74\x4e\x80\x7f\x4d\x50\x28\x3e\xd3\xd9\xde\xa0\x75\xe6\x71\x3c\x21\x3c\x76\x47\xb5\xe8\xfc\x50\x10\xf0\xbb\xbb\x7b\x3f\x6d\xf8\x80\x4d\x49\xc8\x79\xf1\x0d\x59\x0f\x1b\xd7\xf8\x7d\x0f\x63\x57\xd1\x71\xab\xd5\x4b\x10\x99\x31\xa4\x5c\xbc\xe6\xd2\xd1\xf2\x04\x5c\x59\x2e\x4a\x12\xc4\x8e\xed\xf1\xf8\x17\x7b\x76\x79\xb7\x2c\x4b\x83\xf7\xd9\x8c\x8c\x22\x47\x1d\xec\x70\x75\x12\x4a\xb5\xc2\xf7\x7e\xc0\xec\xf2\x6d\x45\x88\x85\x8c\x16\xd3\x6a\x0f\xb1\x4b\xf3\x99\xd6\x5c\xbc\x75\xb5\x94\x5a\x87\xf7\xd5\x84\x9b\x7d\x21\x2d\xfc\x30\xec\x38\x94\xc9\xad\xb4\x79\x9c\xce\x71\x66\xa4\xe8\xed\x92\x7c\x79\xb1\x01\x1b\x15\xd4\xb1\x51\x9e\xf7\xd0\xcf\x08\x6f\xfd\xf8\xad\x0d\xcb\x85\x5c\x05\x6e\x60\x56\xec\x04\x43\x9f\x32\xb2\x1d\xa5\xf7\xee\xe7\xa1\x87\xe3\xb2\x92\xdf\x75\x3b\x21\xf4\x25\x41\x33\x71\xd9\x08\x03\x9b\x0b\x93\xe3\x5c\xd3\xf2\xb5\xd2\xe5\xb9\xe6\x56\x67\xf5\x0c\x81\xc3\xaf\xf8\x68\xa9\x0b\xfd\xcf\x48\x12\xc7\xb5\xc4\x70\xd7\xc9\x7b\xcc\xd9\x76\x13\x7d\x79\xf6\x1c\xd9\x3a\x6e\xe4\x3d\x34\xbb\xb6\x1c\x78\xfb\x82\xf9\x37\xcb\x73\x76\xe3\xff\x70\x52\xf3\x63\xf3\xeb\x85\x13\x3d\xf4\x7f\xe7\x9d\x1e\x50\x53\x69\x2f\x1c\x6b\xbd\xda\x55\xe8\x05\x5a\x6f\x0e\xdb\x2b\x66\x0f\xdc\x3f\xbd\x6f\x37\x5a\x91\x5e\x4c\x65\x6b\x43\x7b\x8f\x01\x0f\xf7\xc5\xf7\xb7\x3a\xab\x33\x77\x8d\xbe\xdb\x4c\xf2\x5c\x7c\xef\x68\x93\x11\xd5\x20\xa9\xbc\x2b\xa6\xcf\x8e\x8c\xc2\xf8\x4e\x8b\xca\x65\x71\xe3\x4a\xfc\x5e\x1b\x2a\x2e\xe8\x8f\xfb\xb5\xc8\x09\x3f\xf0\x60\x49\xae\x9e\xae\xfe\x1b\x00\x00\xff\xff\x25\xc5\xdd\xd0\xb6\x32\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 12982, mode: os.FileMode(420), modTime: time.Unix(1536710215, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
